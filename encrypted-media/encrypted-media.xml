<!DOCTYPE HTML>
<html lang='en'>
  <head>
    <title>Encrypted Media Extensions</title>
    <style><!-- Legacy formatting from video-working-draft.css. -->
    <!-- Makes the term being defined bold. -->
    dt, dfn { font-weight: bold; font-style: normal; }

    <!-- Makes links inside <code> orange. -->
    @media screen { code { color: orangered; } code :link, code :visited { color: inherit; } }

    <!-- Adds the lines in summary tables. -->
    table { border-collapse: collapse; border-style: hidden hidden none hidden; }
    table thead, table tbody { border-bottom: solid; }
    table td, table th { border-left: solid; border-right: solid; border-bottom: solid thin; vertical-align: top; padding: 0.2em; }

    <!-- Adds the vertical bars and indentation for examples. -->
    .example { display: block; color: #222222; background: #FCFCFC; border-left: double; margin-left: 2em; padding-left: 1em; }

    <!--Adds the border and gray box around IDL text. -->
    pre.idl { border: solid thin; background: #EEEEEE; color: black; padding: 0.5em 1em; }
    <!--Causes links in IDL text to remain black. -->
    pre.idl :link, pre.idl :visited { color: inherit; background: transparent; }

    <!-- Adds the green box around attribute descriptions. -->
    dl.domintro { color: green; margin: 2em 0 2em 2em; padding: 0.5em 1em; border: none; background: #DDFFDD; }
    <!--Causes links for the attribute names to remain black. -->
    dl.domintro dt, dl.domintro dt * { color: black; text-decoration: none; }

    <!-- Adds the '-> arrow in conditional steps. -->
    dl.switch > dt:before { content: '\21AA'; padding: 0 0.5em 0 0; display: inline-block; width: 1em; text-align: right; line-height: 0.5em; }

    <!-- Adds underlining of non-normative <span>. -->
    p  > span:not([title=""]):not([class="XXX"]):not([class="impl"]):not([class="note"]),
    li > span:not([title=""]):not([class="XXX"]):not([class="impl"]):not([class="note"]) { border-bottom: solid #9999CC; }

    <!-- Adds the white box containing the non-normative note for the green box around attribute descriptions. -->
    .domintro:before { display: table; margin: -1em -0.5em -0.5em auto; width: auto; content: 'This box is non-normative. Implementation requirements are given below this box.'; color: black; font-style: italic; border: solid 2px; background: white; padding: 0 0.25em; }
    </style>
    <style><!-- ISSUES/NOTES -->
    div.issue-title, div.note-title {
        padding-right:  1em;
        min-width: 7.5em;
        color: #b9ab2d;
    }
    div.issue-title { color: #e05252; }
    div.note-title { color: #52e052; }
    div.issue-title span, div.note-title span {
        text-transform: uppercase;
    }
    div.note, div.issue {
        margin-top: 1em;
        margin-bottom: 1em;
    }
    .note > p:first-child, .issue > p:first-child { margin-top: 0 }
    .issue, .note {
        padding: .5em;
        border-left-width: .5em;
        border-left-style: solid;
    }
    div.issue, div.note {
        padding: 0.5em;
        margin: 1em 0;
        position: relative;
        clear: both;
    }
    span.note, span.issue { padding: .1em .5em .15em; }
    
    .issue {
        border-color: #e05252;
        background: #fbe9e9;
    }
    .note {
        border-color: #52e052;
        background: #e9fbe9;
    }
    .noteHeader {
      font-weight: bold;
      display: block;
      color: #005a9c;
      color: black;
      padding-top: 0.5em;
    }
    </style>
    <style type="text/css">
      div.nonnormative { color: green; margin: 2em 0 2em 0em; padding: 0.5em 1em; border: none; background: #DDFFDD; }
      .nonnormative:before { display: table; margin: -1em -0.5em -0.5em auto; width: auto; content: 'This section is non-normative.'; color: black; font-style: italic; border: solid 2px; background: white; padding: 0 0.25em; }

      <!-- For inline non-normative text. -->
      .non-normative { font-style: italic; color: DarkSlateGrey; }
      .non-normative em { font-style: normal;}
      .non-normative var { font-style: normal;}
    </style>
    <link rel="stylesheet" type="text/css" href="https://www.w3.org/StyleSheets/TR/w3c-ed.css"/>
  </head>
  <body>
    <div class="head">
      <p><a href="http://www.w3.org/"><img src="https://www.w3.org/Icons/w3c_home" alt="W3C" width="72" height="48" /></a></p>
      <h1>Encrypted Media Extensions</h1>
      <h2 id="draft-date">W3C Editor's Draft 7 May 2014</h2>
      <dl>
        <dt>This Version:</dt>
        <dd><a href="http://dvcs.w3.org/hg/html-media/raw-file/default/encrypted-media/encrypted-media.html">http://dvcs.w3.org/hg/html-media/raw-file/default/encrypted-media/encrypted-media.html</a></dd>
        <dt>Latest Published Version:</dt>
        <dd><a href="http://www.w3.org/TR/encrypted-media/">http://www.w3.org/TR/encrypted-media/</a></dd>
        <dt>Latest editor's draft:</dt>
        <dd><a href="http://dvcs.w3.org/hg/html-media/raw-file/default/encrypted-media/encrypted-media.html">http://dvcs.w3.org/hg/html-media/raw-file/default/encrypted-media/encrypted-media.html</a></dd>
        <dt>Previous Versions:</dt>
        <dd><a href="http://www.w3.org/TR/2014/WD-encrypted-media-20140218/">http://www.w3.org/TR/2014/WD-encrypted-media-20140218/</a></dd>
        <dd><a href="http://www.w3.org/TR/2013/WD-encrypted-media-20130510/">http://www.w3.org/TR/2013/WD-encrypted-media-20130510/</a></dd>
        <dd><a href="http://www.w3.org/TR/2013/WD-encrypted-media-20131022/">http://www.w3.org/TR/2013/WD-encrypted-media-20131022/</a></dd>
        <dt>Editors:</dt>
        <dd>David Dorwin, Google, Inc.</dd>
        <dd>Adrian Bateman, Microsoft Corporation</dd>
        <dd>Mark Watson, Netflix, Inc.</dd>
  <dt>Bug/Issue lists:</dt>
  <dd><a href='http://w3.org/brief/MjY5'>Bugzilla</a>, <a href='http://www.w3.org/html/wg/tracker/products/19'>Tracker</a></dd>
  <dt>Discussion list:</dt>
  <dd><a href='http://lists.w3.org/Archives/Public/public-html-media/'>public-html-media@w3.org</a></dd>
  <dt>Test Suite:</dt>
  <dd>None yet</dd>
      </dl>

    <p class="copyright"><a href="http://www.w3.org/Consortium/Legal/ipr-notice#Copyright">Copyright</a> &#169; 2014 <a href="http://www.w3.org/"><abbr title="World Wide Web Consortium">W3C</abbr></a><sup>&#174;</sup> (<a href="http://www.csail.mit.edu/"><abbr title="Massachusetts Institute of Technology">MIT</abbr></a>, <a href="http://www.ercim.eu/"><abbr title="European Research Consortium for Informatics and Mathematics">ERCIM</abbr></a>, <a href="http://www.keio.ac.jp/">Keio</a>, <a href="http://ev.buaa.edu.cn/">Beihang</a>), All Rights Reserved. W3C <a href="http://www.w3.org/Consortium/Legal/ipr-notice#Legal_Disclaimer">liability</a>, <a href="http://www.w3.org/Consortium/Legal/ipr-notice#W3C_Trademarks">trademark</a> and <a href="http://www.w3.org/Consortium/Legal/copyright-documents">document use</a> rules apply.</p>
    <hr/>
    </div>

    <h2>Abstract</h2>

    <p>This proposal extends HTMLMediaElement providing APIs to control playback of protected content.</p>
    <p>The API supports use cases ranging from simple clear key decryption to high value video (given an appropriate user agent implementation).
    License/key exchange is controlled by the application, facilitating the development of robust playback applications supporting a range of content decryption and protection technologies.</p>
    <p>This specification does not define a content protection or Digital Rights Management system. Rather, it defines a common API that may be used to discover, select and interact with
    such systems as well as with simpler content encryption systems. Implementation of Digital Rights Management is not required for compliance with this specification: only the simple
    clear key system is required to be implemented as a common baseline.</p>
    <p>The common API supports a simple set of content encryption capabilities, leaving application functions such as authentication and authorization to page authors. This is achieved by
    requiring content protection system-specific messaging to be mediated by the page rather than assuming out-of-band communication between the encryption system and a license
    or other server.</p>
 
    <h2>Status of This Document</h2>

    <p><em>
      This section describes the status of this document at the time of its publication. Other documents may supersede this document.
      A list of current W3C publications and the latest revision of this technical report can be found in the
      <a href="http://www.w3.org/TR/">W3C technical reports index</a> at http://www.w3.org/TR/.
    </em></p>
    <p>Implementers should be aware that this specification is not stable. <strong>Implementers who are not taking part in the discussions are likely to find the specification changing out from under them in incompatible ways.</strong> Vendors interested in implementing this specification before it eventually reaches the Candidate Recommendation stage should join the mailing list mentioned below and take part in the discussions.</p>
    <p>
      This document was published by the <a href="http://www.w3.org/html/wg/">HTML working group</a> as an Editor's Draft.
      Please submit comments regarding this document by using the W3C's (<a href="https://www.w3.org/Bugs/Public/enter_bug.cgi?product=HTML%20WG&amp;component=Encrypted%20Media%20Extensions">public bug database</a>) with the product set to <kbd>HTML WG</kbd> and the component set to
      <kbd>Encrypted Media Extensions</kbd>.
      If you cannot access the bug database, submit comments to <a href="mailto:public-html-media@w3.org">public-html-media@w3.org</a>
      (<a href="mailto:public-html-media-request@w3.org?subject=subscribe">subscribe</a>,
      <a href="http://lists.w3.org/Archives/Public/public-html-media/">archives</a>) and arrangements will be made to transpose the comments to the bug database.
      All feedback is welcome.
    </p>
    <p>
      Publication as an Editor's Draft does not imply endorsement by the W3C Membership. This is a draft document and may be updated,
      replaced or obsoleted by other documents at any time. It is inappropriate to cite this document as other than work in progress.
    </p>
    <p class="non-normative">Note: It is an open issue whether and how the spec should do more to encourage/ensure CDM-level interop. See <a href="https://www.w3.org/Bugs/Public/show_bug.cgi?id=20944">Bug 20944</a>.</p>
    <p class="non-normative">Note: This specification contains sections for describing <a href="#security">security</a> and <a href="#privacy">privacy</a> considerations. These sections are not final and review is welcome.</p>
    <p>
      This document was produced by a group operating under the <a href="http://www.w3.org/Consortium/Patent-Policy-20040205/">5 February 2004 W3C Patent Policy</a>.
      W3C maintains a <a href="http://www.w3.org/2004/01/pp-impl/40318/status" rel="disclosure">public list of any patent disclosures</a> made in connection with
      the deliverables of the group; that page also includes instructions for disclosing a patent. An individual who has actual knowledge of a patent which
      the individual believes contains <a href="http://www.w3.org/Consortium/Patent-Policy-20040205/#def-essential">Essential Claim(s)</a> must disclose the
      information in accordance with <a href="http://www.w3.org/Consortium/Patent-Policy-20040205/#sec-Disclosure">section 6 of the W3C Patent Policy</a>.
      </p>


    <h2 id="toc">Table of Contents</h2>

    <ul style="list-style-type:none">
      <li><a href="#introduction">1. Introduction</a></li>
        <li><ul style="list-style-type:none">
          <li><a href="#definitions">1.1. Definitions</a></li>
        </ul></li>
      <li><a href="#extensions">2. Media Element Extensions</a></li>
        <li><ul style="list-style-type:none">
          <li><a href="#exceptions">2.1. Exceptions</a></li>
          <li><a href="#mediakeyerror">2.2. MediaKeyError</a></li>
          <li><a href="#media-element-restictions">2.3. Media Element Restrictions</a></li>
        </ul></li>
      <li><a href="#events">3. Events</a></li>
        <li><ul style="list-style-type:none">
          <li><a href="#event-definitions">3.1 Event Definitions</a></li>
          <li><a href="#event-summary">3.2 Event Summary</a></li>
        </ul></li>
      <li><a href="#algorithms">4. Algorithms</a></li>
        <li><ul style="list-style-type:none">
          <li><a href="#algorithms-initdata-encountered">4.1. Initialization Data Encountered</a></li>
          <li><a href="#algorithms-encrypted-block">4.2. Encrypted Block Encountered</a></li>
          <li><a href="#algorithms-queue-message">4.3. Queue a "message" Event</a></li>
          <li><a href="#algorithms-queue-error">4.4. Queue an "error" Event</a></li>
          <li><a href="#algorithms-update-usable-key-ids">4.5. Update Usable Key IDs</a></li>
          <li><a href="#algorithms-session-close">4.6. Session Close</a></li>
        </ul></li>
      <li><a href="#simple-decryption">5. Simple Decryption</a></li>
        <li><ul style="list-style-type:none">
          <li><a href="#simple-decryption-clear-key">5.1. Clear Key</a></li>
        </ul></li>
      <li><a href="#security">6. Security Considerations</a></li>
      <li><a href="#privacy">7. Privacy Considerations</a></li>
      <li><a href="#examples">8. Examples</a></li>
      <li><a href="#revision-history">9. Revision History</a></li>
    </ul>


    <h2 id="introduction">1. Introduction</h2>
    <non-normative-section/>
    <p>
      This proposal allows JavaScript to select content protection mechanisms, control license/key exchange, and implement custom license management algorithms.
      It supports a wide range of use cases without requiring client-side modifications in each user agent for each use case.
      This also enables content providers to develop a single application solution for all devices.
      A generic stack implemented using the proposed APIs is shown below.
      This diagram shows an example flow: other combinations of API calls and events are possible.
    </p>
    <img src="stack_overview.svg" alt="A generic stack implemented using the proposed APIs" height="700"></img>

    <h3 id="definitions">1.1. Definitions</h3>
    <p>Text in <span class="non-normative">this font and color</span> is non-normative.</p>

    <h4 id="cdm">1.1.1. Content Decryption Module (CDM)</h4>
    <p>The Content Decryption Module (CDM) is a generic term for the client component that provides the functionality, including decryption, for one or more <a href="#key-system">Key Systems</a>.</p>
    <p class="non-normative">Implementations may or may not separate the implementations of CDMs or treat them as separate from the user agent.
    This is transparent to the API and application.
    A user agent may support one or more CDMs.</p>

    <h4 id="key-system">1.1.2. Key System</h4>
    <p>A Key System is a generic term for a decryption mechanism and/or content protection provider.
    Key System strings provide unique identification of a Key System.
    They are used by the user agent to select the <a href="#cdm">Content Decryption Modules</a> and identify the source of a key-related event.
    <a href="#simple-decryption">Simple Decryption</a> Key Systems are supported by all user agents. User agents may also provide additional CDMs with corresponding Key System strings.
    </p>

    <p>A Key System string is always a reverse domain name. <span class="non-normative">For example, "com.example.somesystem".</span>
    Key System strings are compared using case-sensitive matching. It is recommended that CDMs use simple lower-case ASCII key system strings.</p>

    <p class="non-normative">
    Within a given system ("somesystem" in the example), subsystems may be defined as determined by the key system provider.
    For example, "com.example.somesystem.1" and "com.example.somesystem.1_5".
    Key System providers should keep in mind that these will be used for comparison and discovery, so they should be easy to compare and the structure should remain reasonably simple.
    </p>

    <h4 id="key-session">1.1.3. Key Session</h4>
    <p>A Key Session, or simply Session, represents the lifetime of the license(s)/key(s) it contains and associates all messages related to them.
    Sessions are embodied as <coderef>MediaKeySession</coderef> objects.
    Each Key session is associated with a single instance of <a href="#initialization-data">Initialization Data</a> provided in the <methodref>createSession</methodref> call.
    </p>
    <p>Each Key Session is associated with a single <coderef>MediaKeys</coderef> object, and only <a href="#media-element">media elements</a> associated with that object may access key(s) associated with the session.
    Other <coderef>MediaKeys</coderef> objects, <a href="#cdm">CDM</a> instances, and media elements may <em>not</em> access the key session or use its key(s).
    Key sessions and the keys they contain are no longer usable by the CDM for decryption when the <a href="#algorithms-session-close">session is closed</a>, including when the <coderef>MediaKeySession</coderef> object is destroyed.
    </p>

    <h4 id="session-id">1.1.4. Session ID</h4>
    <p>A Session ID is a unique string identifier generated by the user agent or <a href="#cdm">CDM</a> that can be used by the application to identify <coderef>MediaKeySession</coderef> objects.
    <span class="non-normative">(The underlying content protection client or server do not necessarily need to support Session IDs.)</span>
    </p>

    <p>A new Session ID is generated each time the user agent and CDM successfully create a new session.</p>

    <p>Each Session ID shall be unique within the browsing context in which it was created.
    <span class="non-normative">(Note: Some use cases may require that Session IDs be unique within the origin over time, including across browsing sessions.)</span>
    </p>

    <h4 id="decryption-key">1.1.5. Key</h4>
    <p>Unless otherwise stated, key refers to a decryption key that can be used to decrypt blocks within <videoanchor name="media-data">media data</videoanchor>.
    Each key is uniquely identified by a <a href="#decryption-key-id">key ID</a>.
    A key is associated with the <a href="#key-session">session</a> used to provide it to the CDM. (The same key may be present in multiple sessions.)
    Such keys may only be provided to the <a href="#cdm">CDM</a> via an <methodref>update</methodref> call. (They may later be loaded by <methodref>loadSession</methodref> as part of the stored session data.)
    </p>
    
    <p class="non-normative">A key is considered <em>usable</em> if it is currently usable for decryption as determined by the CDM. <span class="non-normative">For example, a key is not usable if its license has expired.</span></p>
        
    <h4 id="decryption-key-id">1.1.6. Key ID</h4>
    <p>A <a href="#decryption-key">key</a> is associated with a key ID, which uniquely identifies a key.
    The container specifies the ID of the key that can decrypt a block or set of blocks within the <videoanchor name="media-data">media data</videoanchor>.
    <a href="#initialization-data">Initialization Data</a> may contain key ID(s) to identify the keys that are needed to decrypt the media data.
    However, there is no requirement that Initialization Data contain any or all key IDs used in the <videoanchor name="media-data">media data</videoanchor> or <videoanchor name="media-resource">media resource</videoanchor>.
    <a href="#license">Licenses</a> provided to the CDM associate each key with a key ID so the <a href="#cdm">CDM</a> can select the appropriate key when decrypting an encrypted block of media data.
    </p>

    <h4 id="license">1.1.7. License</h4>
    <p>A license is a key system-specific message that includes one or more decryption <a href="#decryption-key">key(s)</a> - each associated with a <a href="#decryption-key-id">key ID</a> - and potentially other information about key usage.</p>

    <h4 id="initialization-data">1.1.8. Initialization Data</h4>
    <p class="non-normative">
    <a href="#key-system">Key Systems</a> usually require a block of initialization data containing information about the stream to be decrypted before they can construct a license request message.
    This block could be a simple key or content ID or a more complex structure containing such information.
    It should always allow unique identification of the key(s) needed to decrypt the content.
    This initialization information may be obtained in some application-specific way or provided with the <videoanchor name="media-data">media data</videoanchor>.
    </p>

    <p>
    Initialization Data is a generic term for container-specific data that is used by <a href="#cdm">CDMs</a> to generate a license request.
    Initialization data found with the <videoanchor name="media-data">media data</videoanchor> is provided to the application in the <coderef>initData</coderef> attribute of the <coderef>needkey</coderef> event.
    </p>

    <p>
    The format of the initialization data depends upon the type of container, and containers may support more than one format
    of initialization data. The <dfn id="initialization-data-type">initialization data type</dfn> is a string that indicates what
    format the initialization data is provided in. Initialization data type strings are always matched case-sensitively. It is
    recommended that initialization data type strings are lower-case ASCII strings.
    </p>

    <p>
    The <a href="initdata-format-registry.html">Encrypted Media Extensions Stream Format and Initialization Data Format Registry</a>
    provides the mapping from initialization data type string to the specification for each format.
    </p>


    <h4 id="cross-origin-support">1.1.9. Cross Origin Support</h4>
    <p>During playback, embedded media data is exposed to script in the embedding origin. In order for the API to fire <coderef>needkey</coderef>
    and <coderef prefix="event">message</coderef> events, <videoanchor name="media-data">media data</videoanchor> must be <cors-same-origin/> with the embedding page.
    If <videoanchor name="media-data">media data</videoanchor> is cross-origin with the embedding document, authors should use the <videoanchor name="attr-media-crossorigin">crossorigin</videoanchor> attribute
    on the <a href="#media-element">media element</a> and CORS headers on the <videoanchor name="media-data">media data</videoanchor> response to make it <cors-same-origin/>.
    </p>

    <h2 id="extensions">2. Media Element Extensions</h2>
    <p>We extend <dfn id="media-element" title="media element"><media-element/></dfn> to allow decryption key acquisition to be handled in JavaScript.</p>

    <pre class="idl">
enum <precodedfn>MediaWaitingFor</precodedfn> { "<precodedfn prefix="waitingfor">none</precodedfn>", "<precodedfn prefix="waitingfor">data</precodedfn>", "<precodedfn prefix="waitingfor">key</precodedfn>" };
partial interface <precodedfn>HTMLMediaElement</precodedfn> {
  // Encrypted Media
  readonly attribute <precoderef>MediaKeys</precoderef> <precoderef prefix="attr">mediaKeys</precoderef>;
  Promise&lt;any&gt; <premethodref>setMediaKeys</premethodref>(<precoderef>MediaKeys</precoderef>? mediaKeys);
  
  attribute <EventHandler/> <precoderef>onneedkey</precoderef>;

  readonly attribute <precoderef>MediaWaitingFor</precoderef> <precoderef>waitingFor</precoderef>;
};

enum <precodedfn>IsTypeSupportedResult</precodedfn> { "<precodedfn prefix="istypesupportedresultempty"></precodedfn>" /* empty string */, "<precodedfn prefix="istypesupportedresult">maybe</precodedfn>", "<precodedfn prefix="istypesupportedresult">probably</precodedfn>" };
enum <precodedfn>SessionType</precodedfn> { "<precodedfn prefix="sessiontype">temporary</precodedfn>", "<precodedfn prefix="sessiontype">persistent</precodedfn>" };
interface <precodedfn>MediaKeys</precodedfn> {
  readonly attribute DOMString <precoderef>keySystem</precoderef>;

  Promise&lt;<precoderef>MediaKeySession</precoderef>&gt; <premethodref>createSession</premethodref>(DOMString <a href="#initialization-data-type">initDataType</a>, Uint8Array initData, optional <precoderef>SessionType</precoderef> sessionType = "<precoderef prefix="sessiontype">temporary</precoderef>");
  Promise&lt;<precoderef>MediaKeySession</precoderef>&gt; <premethodref>loadSession</premethodref>(DOMString sessionId);
  Promise&lt;any&gt; <premethodref>setServerCertificate</premethodref>(Uint8Array serverCertificate);

  static Promise&lt;<precoderef>MediaKeys</precoderef>&gt; <premethodref>create</premethodref>(DOMString <a href="#key-system">keySystem</a>)
  static <precoderef>IsTypeSupportedResult</precoderef> <premethodref>isTypeSupported</premethodref>(DOMstring <a href="#key-system">keySystem</a>, optional DOMString <a href="#initialization-data-type">initDataType</a>, optional DOMString contentType, optional DOMString capability);
};

interface <precodedfn>MediaKeySession</precodedfn> : <dom4ref name="eventtarget">EventTarget</dom4ref> {
  // error state
  readonly attribute <precoderef>MediaKeyError</precoderef>? <precoderef>error</precoderef>;

  // session properties
  readonly attribute DOMString <precoderef prefix="session">keySystem</precoderef>;
  readonly attribute DOMString <precoderef>sessionId</precoderef>;
  readonly attribute Array&lt;Uint8Array&gt; <precoderef>usableKeyIds</precoderef>;
  readonly attribute Promise&lt;any&gt; <precoderef>closed</precoderef>;

  // session operations
  Promise&lt;any&gt; <premethodref>update</premethodref>(Uint8Array response);
  Promise&lt;any&gt; <premethodref>close</premethodref>();
  Promise&lt;any&gt; <premethodref>remove</premethodref>();
};

<div class="issue"><div class="issue-title"><span>Issue 1</span></div><p class="">Extensions to <precoderef>HTMLSourceElement</precoderef> may be at risk as discussed in <a href="https://www.w3.org/Bugs/Public/show_bug.cgi?id=23827">Bug 23827</a>.</p></div>
partial interface <precodedfn>HTMLSourceElement</precodedfn> {
  attribute DOMString <precoderef prefix="source">keySystem</precoderef>;
};</pre>

    <div class="note"><div class="noteHeader">Note</div>
      <p>All errors are reported asynchronously by rejecting the returned Promise. This includes WebIDL type mapping errors.</p>
      <p>The steps of an algorithm are always aborted when resolving or rejecting a promise.</p>
    </div>

<!-- Begin HTMLMediaElement -->
    <p>The <codedfn prefix="attr">mediaKeys</codedfn> attribute is the <coderef>MediaKeys</coderef> being used when decrypting encrypted <videoanchor name="media-data">media data</videoanchor> for this <a href="#media-element">media element</a>.</p>
    <p>The <methoddfn name="setMediaKeys">setMediaKeys(<var title="true">mediaKeys</var></methoddfn>) method provides the <coderef>MediaKeys</coderef> to use when decrypting media data during playback. It must run the following steps:</p>
    
    <ol>
      <li><p>If <var>mediaKeys</var> and the <coderef prefix="attr">mediaKeys</coderef> attribute are the same object, return a promise resolved with <code>undefined</code>.</p></li>
      <li><p>Let <var>promise</var> be a new promise.</p></li>
      <li><p>Run the following steps asynchronously:</p>
        <ol>
          <li><p>If <var>mediaKeys</var> is not null, it is already in use by another media element, and the user agent is unable to use it with this element, reject <var>promise</var> with a new <code><dom4ref name="exception-domexception">DOMException</dom4ref></code> whose name is <code><a href="#dfn-QuotaExceededError">"QuotaExceededError"</a></code> and that has the message "The MediaKeys object cannot be used with additional HTMLMediaElements."</p></li>
          <li><p>If the <coderef prefix="attr">mediaKeys</coderef> attribute is not null, run the following steps:</p>
            <ol>
              <li><p>If the user agent or CDM do not support removing the association, return a promise rejected with a new <code><dom4ref name="exception-domexception">DOMException</dom4ref></code> whose name is <code><a href="#dfn-NotSupportedError">"NotSupportedError"</a></code> and that has the message "The existing MediaKeys object cannot be removed."</p></li>
              <li><p>If the association cannot currently be removed <span class="non-normative">(i.e. during playback)</span>, return a promise rejected with a new <code><dom4ref name="exception-domexception">DOMException</dom4ref></code> whose name is <code><a href="#dfn-InvalidStateError">"InvalidStateError"</a></code> and that has the message "The existing MediaKeys object cannot be removed at this time."</p></li>
              <li><p>Stop using the CDM instance represented by the <coderef prefix="attr">mediaKeys</coderef> attribute to decrypt <videoanchor name="media-data">media data</videoanchor> and remove the association with the media element.</p></li>
              <li><p>If the preceding step failed, reject <var>promise</var> with a new <code><dom4ref name="exception-domexception">DOMException</dom4ref></code> whose name is the appropriate <a href="#mediakeyerror-names">error name</a> and that has an appropriate message.</p></li>
            </ol>
          </li>
          <li><p>If <var>mediaKeys</var> is not null, run the following steps:</p>
            <ol>
              <li><p>Associate the CDM instance represented by <var>mediaKeys</var> with the media element for decrypting <videoanchor name="media-data">media data</videoanchor>.</p></li>
              <li><p>If the preceding step failed, run the following steps:</p>
                <ol>
                  <li><p>Set the <coderef prefix="attr">mediaKeys</coderef> attribute to null.</p></li><!-- In case it was previously not null since the previous association has been removed. -->
                  <li><p>Reject <var>promise</var> with a new <code><dom4ref name="exception-domexception">DOMException</dom4ref></code> whose name is the appropriate <a href="#mediakeyerror-names">error name</a> and that has an appropriate message.</p></li>
                </ol>
              </li>
              <li><p>If the media element is <a href="#waiting-for-a-key">waiting for a key</a>, <queue-a-task/> to attempt to resume playback.</p>
                <p>The user agent may choose to skip this step if it knows resuming will fail <span class="non-normative">(i.e. <var>mediaKeys</var> has no sessions)</span>.</p>
              </li>
            </ol>
          </li>
          <li><p>Set the <coderef prefix="attr">mediaKeys</coderef> attribute to <var>mediaKeys</var>.</p></li>
          <li><p>Resolve <var>promise</var> with <code>undefined</code>.</p></li>
        </ol>
      </li>
      <li><p>Return <var>promise</var>.</p></li>
    </ol>
    
    <p class="non-normative">Note: Support for clearing or replacing the associated <coderef>MediaKeys</coderef> object during playback is a quality of implementation issue. In many cases it will result in a bad user experience or rejected promise.</p>
    <p class="non-normative">Note: As a best practice, applications should create a MediaKeys object and call <methodref>setMediaKeys</methodref> before providing <videoanchor name="media-data">media data</videoanchor> (for example, setting the src attribute of the <a href="#media-element">media element</a>). This avoids potential delays in some implementations.</p>
    <p class="non-normative">Note: In some implementations, <coderef>MediaKeySession</coderef> objects created by <methodref>createSession</methodref> may not fire any events until the <coderef>MediaKeys</coderef> object is associated with a media element using <methodref>setMediaKeys</methodref>.</p>

    <p>The <codedfn>onneedkey</codedfn> event handler for the <coderef>needkey</coderef> event must be supported by all HTMLMediaElements as both a content attribute and an IDL attribute.</p>

    <p>The <codedfn>waitingFor</codedfn> attribute indicates what the media element is waiting for, if anything (indicated by the <videoref name="event-media-waiting">waiting</videoref> and <videoref name="event-media-canplay">canplay</videoref> events). This is described in the <a href="#algorithms-encrypted-block">Encrypted Block Encountered</a> algorithm.</p>

<!-- Begin MediaKeys -->
    <p>The <methoddfn name="create">create(<var title="true">keySystem</var>)</methoddfn> method creates a new <coderef>MediaKeys</coderef> object for <var title="true">keySystem</var>. It must run the following steps:</p>

    <ol>
      <li><p>If <var title="true">keySystem</var> is an empty string, return a promise rejected with a new <code><dom4ref name="exception-domexception">DOMException</dom4ref></code> whose name is <code><a href="#dfn-InvalidAccessError">"InvalidAccessError"</a></code> and that has the message "The keySystem parameter is empty."</p></li>
      <li><p>If <var title="true">keySystem</var> is not one of the <a href="#key-system">Key Systems</a> supported by the user agent, return a promise rejected with a new <code><dom4ref name="exception-domexception">DOMException</dom4ref></code> whose name is <code><a href="#dfn-NotSupportedError">"NotSupportedError"</a></code> and that has the message "The key system <var title="true">keySystem</var> is not supported." String comparison is case-sensitive.</p></li>
      <li><p>Let <var>promise</var> be a new promise.</p></li>
      <li><p>Run the following steps asynchronously:</p>
        <ol>
          <li><p>Let <var title="true">cdm</var> be the <a href="#cdm">content decryption module</a> corresponding to <var title="true">keySystem</var>.</p></li>
          <li><p>Load and initialize the <var title="true">cdm</var> if necessary.</p></li>
          <li><p>If <var title="true">cdm</var> fails to load or initialize, reject <var>promise</var> with a new <code><dom4ref name="exception-domexception">DOMException</dom4ref></code> whose name is the appropriate <a href="#mediakeyerror-names">error name</a> and that has an appropriate message.</p></li>

          <li>
            <p>Let <var title="true">media keys</var> be a new <coderef>MediaKeys</coderef> object, and initialize it as follows:</p>
            <ol>
              <li><p>Set the <coderef>keySystem</coderef> attribute to <var title="true">keySystem</var>.</p></li>
            </ol>
          </li>
          <li><p>Resolve <var>promise</var> with <var title="true">media keys</var>.</p></li>
        </ol>
      </li>
      <li><p>Return <var>promise</var>.</p></li>
    </ol>

    <p>The <codedfn>keySystem</codedfn> attribute identifies the <a href="#key-system">Key System</a> being used.</p>

    <p>The <methoddfn name="createSession">createSession(<var title="true">initDataType</var>, <var title="true">initData</var>, <var title="true">sessionType</var>)</methoddfn> method creates a new <coderef>MediaKeySession</coderef> object for the <var title="true">initData</var>. It must run the following steps:</p>
    <p class="non-normative">The contents of <var title="true">initData</var> are container-specific <a href="#initialization-data">Initialization Data</a>.
    <var title="true">initDataType</var> is the <a href="#initialization-data-type">initialization data type</a> that indicates how to interpret <var title="true">initData</var>. 
    </p>
    <p class="non-normative">Note: User agents and <a href="#cdm">CDMs</a> should not treat sessions created with audio data differently than those created with video data.
    That is, there is no such thing as an "audio session" or a "video session" - all sessions are used for all media streams processed by <var title="true">cdm</var>.
    </p>

    <ol>
      <li><p>If <var title="true">initDataType</var> is an empty string, return a promise rejected with a new <code><dom4ref name="exception-domexception">DOMException</dom4ref></code> whose name is <code><a href="#dfn-InvalidAccessError">"InvalidAccessError"</a></code> and that has the message "The initDataType parameter is empty."</p></li>
      <li><p>If <var title="true">initData</var> is an empty array, return a promise rejected with a new <code><dom4ref name="exception-domexception">DOMException</dom4ref></code> whose name is<code><a href="#dfn-InvalidAccessError">"InvalidAccessError"</a></code> and that has the message "The initData parameter is empty."</p></li>
      <li><p>If <var title="true">initDataType</var> is not an <a href="#initialization-data-type">initialization data type</a> supported by the <a href="#cdm">content decryption module</a> corresponding to the <coderef>keySystem</coderef>, return a promise rejected with a new <code><dom4ref name="exception-domexception">DOMException</dom4ref></code> whose name is <code><a href="#dfn-NotSupportedError">"NotSupportedError"</a></code> and that has the message "The initialization data type <var title="true">initDataType</var> is not supported by the key system." String comparison is case-sensitive.</p></li>
      <li><p>If <var title="true">sessionType</var> is not supported by the <a href="#cdm">content decryption module</a> corresponding to the <coderef>keySystem</coderef>, return a promise rejected with a new <code><dom4ref name="exception-domexception">DOMException</dom4ref></code> whose name is <code><a href="#dfn-NotSupportedError">"NotSupportedError"</a></code> and that has the message "<var title="true">sessionType</var> sessions are not supported by the key system."</p></li>
      <li><p>Let <var>init data</var> be a copy of the contents of the <var title="true">initData</var> parameter.</p></li>
      <li><p>Let <var>promise</var> be a new promise.</p></li>
      <li><p>Run the following steps asynchronously:</p>
        <ol>
          <li><p>If the <var title="true">list of active session Initialization Data</var> for this object includes an entry for the <var title="true">initDataType</var>-<var>init data</var> pair, resolve <var>promise</var> with <code>null</code>.</p>
            <p class="non-normative">In other words, do not create a session if a non-closed session already exists for this <var>init data</var>.</p>
          </li>
          <li><p>Let <var title="true">request</var> be null.</p></li>
          <li><p>Let <var title="true">default URL</var> be null.</p></li>
          <li><p>Let <var title="true">cdm</var> be the <var title="true">cdm</var> loaded in <methodref>create</methodref>.</p></li>
          <li><p>Use the <var title="true">cdm</var> to execute the following steps:</p>
            <ol>
              <li><p>Process the <var>init data</var>, interpreting it per <var title="true">initDataType</var>.</p></li>
              <li><p>Let <var title="true">request</var> be a request <span class="non-normative">(e.g. a license request)</span> generated by the <a href="#cdm">CDM</a> using the <var>init data</var> and <var title="true">sessionType</var>.</p>
                <p>If <var title="true">sessionType</var> is "<coderef prefix="sessiontype">temporary</coderef>", the request is for a temporary non-persisted license.
                If <var title="true">sessionType</var> is "<coderef prefix="sessiontype">persistent</coderef>", the request is for a persistable license.</p>
                <p class="non-normative">Note: The license server may reject the requested type. It should not issue a different type.</p>
                <p><var title="true">cdm</var> must not use any stream-specific data, including <videoanchor name="media-data">media data</videoanchor>, not provided via the <var>init data</var>.</p>
              </li>
              <li><p>If the <var>init data</var> indicates a default URL, let <var title="true">default URL</var> be that URL. The URL may be validated and/or normalized.</p></li>
            </ol>
          </li>
          <li><p>Let the <var title="true">session ID</var> be a unique <a href="#session-id">Session ID</a> string. <span class="non-normative">It may be obtained from <var title="true">cdm</var>.</span></p></li>
          <li><p>Let <var title="true">session</var> be a new <coderef>MediaKeySession</coderef> object, and initialize it as follows:</p>
            <ol>
              <li><p>Set the <coderef>error</coderef> attribute to null.</p></li>
              <li><p>Set the <coderef prefix="session">keySystem</coderef> attribute to the value of the <coderef>MediaKeys</coderef> object's <coderef>keySystem</coderef> attribute.</p></li>
              <li><p>Set the <coderef>sessionId</coderef> attribute to <var title="true">session ID</var>.</p></li>
              <li><p>Set the <coderef>usableKeyIds</coderef> attribute to an empty Array.</p></li>
              <li><p>Let <coderef>closed</coderef> be a new promise.</p></li>
              <li><p>Let the session type be <var title="true">sessionType</var>.</p></li>
              <li><p>Let the session initData be the <var title="true">initDataType</var>-<var>init data</var> pair.</p></li>
            </ol>
          </li>
          <li><p>If any of the preceding steps failed, reject <var>promise</var> with a new <code><dom4ref name="exception-domexception">DOMException</dom4ref></code> whose name is the appropriate <a href="#mediakeyerror-names">error name</a> and that has an appropriate message.</p></li>
          <li><p>Run the <a href="#algorithms-queue-message">Queue a "message" Event</a> algorithm on the <var title="true">session</var>, providing <var title="true">request</var> and <var title="true">default URL</var>.</p></li>
          <li><p>Add an entry for the <var title="true">initDataType</var>-<var>init data</var> pair to the <var title="true">list of active session Initialization Data</var> for this object.</p></li>
          <li><p>Resolve <var>promise</var> with <var title="true">session</var>.</p></li>
        </ol>
      </li>
      <li><p>Return <var>promise</var>.</p></li>
    </ol>

    <p>The <methoddfn name="loadSession">loadSession(<var title="true">sessionId</var>)</methoddfn> method creates a new <coderef>MediaKeySession</coderef> object containing the data stored for the <var title="true">sessionId</var>. It must run the following steps:</p>
    <ol>
      <li><p>If the <a href="#cdm">content decryption module</a> corresponding to the <coderef>keySystem</coderef> attribute does not support loading previous sessions, return a promise rejected with a new <code><dom4ref name="exception-domexception">DOMException</dom4ref></code> whose name is <code><a href="#dfn-NotSupportedError">"NotSupportedError"</a></code> and that has the message "The operation is not supported by the key system."</p></li>
      <li><p>If <var title="true">sessionId</var> is an empty string, return a promise rejected with a new <code><dom4ref name="exception-domexception">DOMException</dom4ref></code> whose name is <code><a href="#dfn-InvalidAccessError">"InvalidAccessError"</a></code> and that has the message "The sessionId parameter is empty."</p></li>
      <li><p>Let <var>promise</var> be a new promise.</p></li>
      <li><p>Run the following steps asynchronously:</p>
        <ol>
          <li><p>Let <var title="true">request</var> be null.</p></li>
          <li><p>Let <var title="true">destination URL</var> be null.</p></li>
          <li><p>Let <var title="true">origin</var> be the <a href="http://www.w3.org/TR/html5/browsers.html#origin-0">origin</a> of the <coderef>MediaKeys</coderef> object's <code><dom4ref name="document">Document</dom4ref></code>.</p></li>
          <li><p>Let <var title="true">cdm</var> be the <var title="true">cdm</var> loaded in <methodref>create</methodref>.</p></li>
          <li><p>Use the <var title="true">cdm</var> to execute the following steps:</p>
            <ol>
              <li><p>If there is no data stored for the <var title="true">sessionId</var> in the <var title="true">origin</var>, resolve <var>promise</var> with <code>undefined</code>.</p></li><!-- "undefined" per https://github.com/w3ctag/promises-guide#rejections-should-be-used-for-exceptional-situations. -->
              <li><p>Let <var title="true">session data</var> be the data stored for the <var title="true">sessionId</var> in the <var title="true">origin</var>.
              This must not include data from other origin(s) or that is not associated with an origin.</p></li>
              <li><p>Load the <var title="true">session data</var>.</p></li>
              <li><p>If a message exchange is required:</p>
                <ol>
                  <li><p>Let <var title="true">request</var> be a request generated by the <a href="#cdm">CDM</a> based on the <var title="true">session data</var>.</p></li>
                  <li><p>If the <var title="true">session data</var> indicates a destination URL for the request, let <var title="true">destination URL</var> be that URL. The URL may be validated and/or normalized.</p></li>
                </ol>
              </li>
            </ol>
          </li>
          <li><p>Let <var title="true">session</var> be a new <coderef>MediaKeySession</coderef> object, and initialize it as follows:</p>
            <ol>
              <li><p>Set the <coderef>error</coderef> attribute to null.</p></li>
              <li><p>Set the <coderef prefix="session">keySystem</coderef> attribute to the value of the <coderef>MediaKeys</coderef> object's <coderef>keySystem</coderef> attribute.</p></li>
              <li><p>Set the <coderef>sessionId</coderef> attribute to <var title="true">sessionId</var>.</p></li>
              <li><p>Set the <coderef>usableKeyIds</coderef> attribute to an Array containing the set of key IDs for which the session contains a currently usable key.</p>
                <p>The <a href="#algorithms-update-usable-key-ids">Update Usable Key IDs</a> algorithm may also be run later should additional processing be necessary.</p>
              </li>
              <li><p>Let <coderef>closed</coderef> be a new promise.</p></li>
              <li><p>Let the session type be "<coderef prefix="sessiontype">persistent</coderef>".</p></li>
            </ol>
          </li>
          <li><p>If any of the preceding steps failed, reject <var>promise</var> with a new <code><dom4ref name="exception-domexception">DOMException</dom4ref></code> whose name is the appropriate <a href="#mediakeyerror-names">error name</a> and that has an appropriate message.</p></li>
          <li>
            <p>If the associated <a href="#media-element">media element(s)</a> are <a href="#waiting-for-a-key">waiting for a key</a>, <queue-a-task/> to attempt to resume playback.</p>
            <p class="non-normative">In other words, resume playback if the necessary key is provided.</p>
            <p>The user agent may choose to skip this step if it knows resuming will fail <span class="non-normative">(i.e. no usable key was added)</span>.</p>
          </li>
          <li><p>If <var title="true">request</var> is not null, run the <a href="#algorithms-queue-message">Queue a "message" Event</a> algorithm on the <var title="true">session</var>, providing <var title="true">request</var> and <var title="true">destination URL</var>.</p></li>
          <li><p>Resolve <var>promise</var> with <var title="true">session</var>.</p></li>
        </ol>
      </li>
      <li><p>Return <var>promise</var>.</p></li>
    </ol>

    <p>The <methoddfn name="setServerCertificate">setServerCertificate(<var title="true">serverCertificate</var>)</methoddfn> method provides a server certificate to be used to encrypt messages to the license server. It must run the following steps:</p>
    <p class="non-normative">The contents of <var title="true">serverCertificate</var> are <a href="#key-system">Key System</a>-specific.</p>
    <p class="non-normative">Key systems that use such certificates should also support requesting the certificate from the server via an  additional round trip. This simplifies interoperability for applications that are not designed to provide certificates to specific key systems.</p>

    <ol>
      <li><p>If <var title="true">serverCertificate</var> is an empty array, return a promise rejected with a new <code><dom4ref name="exception-domexception">DOMException</dom4ref></code> whose name is <code><a href="#dfn-InvalidAccessError">"InvalidAccessError"</a></code> and that has the message "The serverCertificate parameter is empty."</p></li>
      <li><p>If the <coderef>keySystem</coderef> does not support server certificates, return a promise rejected with a new <code><dom4ref name="exception-domexception">DOMException</dom4ref></code> whose name is <code><a href="#dfn-NotSupportedError">"NotSupportedError"</a></code> and that has the message "The operation is not supported by the key system."</p></li>
      <li><p>Let <var>certificate</var> be a copy of the contents of the <var title="true">serverCertificate</var> parameter.</p></li>
      <li><p>Let <var>promise</var> be a new promise.</p></li>
      <li><p>Run the following steps asynchronously:</p>
        <ol>
          <li><p>Let <var title="true">cdm</var> be the <var title="true">cdm</var> loaded in <methodref>create</methodref>.</p></li>
          <li><p>Use the <var title="true">cdm</var> to process <var>certificate</var>.</p></li>
          <li><p>If any of the preceding steps failed, reject <var>promise</var> with a new <code><dom4ref name="exception-domexception">DOMException</dom4ref></code> whose name is the appropriate <a href="#mediakeyerror-names">error name</a> and that has an appropriate message.</p></li>
          <li><p>Resolve <var>promise</var> with <code>undefined</code>.</p></li>
        </ol>
      </li>
      <li><p>Return <var>promise</var>.</p></li>
    </ol>

    <p>The <methoddfn name="isTypeSupported">isTypeSupported(<var title="true">keySystem</var>, <var title="true">initDataType</var>, <var title="true">contentType</var>, <var title="true">capability</var>)</methoddfn> method returns whether <var title="true">keySystem</var> is supported with the <var title="true"><a href="#initialization-data-type">initDataType</a></var>, container and codec(s) specified by <var title="true">contentType</var>, and <var title="true">capability</var>.</p>
    <div class="issue"><div class="issue-title"><span>Issue 2</span></div><p class="">isTypeSupported() is still under discussion. See <a href="https://www.w3.org/Bugs/Public/show_bug.cgi?id=24873">Bug 24873</a>.</p></div>
    <div class="example">
      <p>The following list shows some examples.</p>
      <dl>
        <dt>Returns whether the Some System <a href="#key-system">Key System</a> may be supported. Specific containers and codecs may or may not be supported with Some System.</dt>
        <dd><pre class="code">MediaKeys.isTypeSupported("com.example.somesystem")</pre></dd>
        <!-- TODO: Replace <var title="true">initDataType</var> with "keyids" when bug 25269 is resolved. -->
        <dt>Returns whether the Some System <a href="#key-system">Key System</a> may be supported and is capable of parsing the <a href="#initialization-data-type">initialization data type</a> format <var title="true">initDataType</var>. Specific containers and codecs may or may not be supported with Some System.</dt>
        <dd><pre class="code">MediaKeys.isTypeSupported("com.example.somesystem", <var title="true">initDataType</var>)</pre></dd>
        <dt>Returns whether the Some System <a href="#key-system">Key System</a> may be supported and is capable of parsing the <a href="#initialization-data-type">initialization data type</a> format <var title="true">initDataType</var>, the user agent is capable of demuxing the container specified by <var title="true">mimeType</var>, and the codec(s) specified by <var title="true">mimeType</var> are supported, all as specified by capability "foo".</dt>
        <dd><pre class="code">MediaKeys.isTypeSupported("com.example.somesystem", <var title="true">initDataType</var>, <var title="true">mimeType</var>, "foo")</pre></dd>
        <dt>Returns whether the user agent <em>probably</em> supports <a href="#simple-decryption-clear-key">Clear Key</a> using the <a href="#initialization-data-type">initialization data type</a> format <var title="true">initDataType</var> and the container and codec(s) specified by <var title="true">mimeType</var>.</dt>
        <dd><pre class="code">"probably" == MediaKeys.isTypeSupported("org.w3.clearkey", <var title="true">initDataType</var>, <var title="true">mimeType</var>)</pre></dd>
      </dl>
    </div>

    <p>It must run the following steps:</p>
    
    <ol>
      <li><p>If <var title="true">keySystem</var> is an empty string or contains an unrecognized or unsupported <a href="#key-system">Key System</a>, return the <a href="#dom-istypesupportedempty">empty string</a> and abort these steps. String comparison is case-sensitive.</p></li>
      <li><p>If the <var title="true">keySystem</var> implementation is not available and usable, return the <a href="#dom-istypesupportedempty">empty string</a> and abort these steps.</p></li>
      <li><p>Follow the steps for the first matching condition from the following list:</p>
        <dl class="switch">
          <dt>If <var title="true">keySystem</var> is a value that may be successfully passed to <methodref>create</methodref></dt>
          <dd>Let <var title="true">probably result</var> be "<coderef prefix="istypesupportedresult">probably</coderef>".</dd>
          <dt>Otherwise <span class="non-normative">(as may be the case for strings that are only used for discovery)</span></dt>
          <dd>Let <var title="true">probably result</var> be "<coderef prefix="istypesupportedresult">maybe</coderef>".</dd>
        </dl>
      </li>
      
      <li><p>If <var title="true">initDataType</var> was not provided, follow the steps for the first matching condition from the following list and abort these steps:</p>
        <dl class="switch">
          <dt>If the user agent is <em>not</em> confident that the <var title="true">keySystem</var> implementation is available and usable</dt>
          <dd>Return "<coderef prefix="istypesupportedresult">maybe</coderef>".</dd>
          <dt>Otherwise</dt>
          <dd>Return <var title="true">probably result</var>.</dd>
        </dl>
      </li>

      <li><p>If <var title="true">initDataType</var> is an empty string or contains an unrecognized or unsupported <a href="#initialization-data-type">initialization data type</a>, return the <a href="#dom-istypesupportedempty">empty string</a> and abort these steps. String comparison is case-sensitive.</p></li>
      <li><p>If <var title="true">initDataType</var> is not an <a href="#initialization-data-type">initialization data type</a> supported by the the <var title="true">keySystem</var> implementation, return the <a href="#dom-istypesupportedempty">empty string</a> and abort these steps.</p></li>      
      <li><p>If the <var title="true">keySystem</var> implementation supporting <var title="true">initDataType</var> is not available and usable, return the <a href="#dom-istypesupportedempty">empty string</a> and abort these steps.</p></li>
      <li><p>If <var title="true">contentType</var> was not provided, follow the steps for the first matching condition from the following list and abort these steps:</p>
        <dl class="switch">
          <dt>If the user agent is <em>not</em> confident that the <var title="true">keySystem</var> implementation supporting <var title="true">initDataType</var> is available and usable</dt>
          <dd>Return "<coderef prefix="istypesupportedresult">maybe</coderef>".</dd>
          <dt>Otherwise</dt>
          <dd>Return <var title="true">probably result</var>.</dd>
        </dl>
      </li>

      <li><p>If <var title="true">contentType</var> is an empty string or contains an invalid or unrecognized MIME type, return the <a href="#dom-istypesupportedempty">empty string</a> and abort these steps.</p></li>
      <li><p>Let <var title="true">container</var> be the container type specified by <var title="true">contentType</var>.</p></li>
      <li><p>Let <var title="true">parameters</var> be the <a href="http://tools.ietf.org/html/rfc6381">RFC 6381</a> parameters, if any, specified by <var title="true">contentType</var>.</p></li>
      <li><p>Let <var title="true">media types</var> be the set of media types specified by <var title="true">parameters</var>. <span class="non-normative">(For example, all of the codecs.)</span> It may be empty. The case-sensitivity of string comparisons is determined by the appropriate RFC or other specification. <span class="non-normative">(Case-sensitive string comparison is recommended because <a href="http://tools.ietf.org/html/rfc6381#section-3.3">RFC 6381</a> says, "Values are case sensitive" for some formats.)</span></p></li>
      <li><p>If the user agent does not support <var title="true">container</var>, return the <a href="#dom-istypesupportedempty">empty string</a> and abort these steps. The case-sensitivity of string comparisons is determined by the appropriate RFC. <span class="non-normative">(Per <a href="http://tools.ietf.org/html/rfc6838#section-4.2">RFC 6838</a>, "Both top-level type and subtype names are case-insensitive.")</span></p></li>
      <li><p>If the user agent and <var title="true">keySystem</var> implementation do not support playback of encrypted <videoanchor name="media-data">media data</videoanchor> for all <var title="true">media types</var>, return the <a href="#dom-istypesupportedempty">empty string</a> and abort these steps.</p></li>
      <li><p>If <var title="true">capability</var> was not provided, follow the steps for the first matching condition from the following list and abort these steps:</p>
        <dl class="switch">
          <dt>If the user agent is <em>not</em> confident that the <var title="true">keySystem</var> implementation supporting <var title="true">initDataType</var> is available and usable to decrypt and enable playback of support playback of encrypted <videoanchor name="media-data">media data</videoanchor> for all <var title="true">media types</var></dt>
          <dd>Return "<coderef prefix="istypesupportedresult">maybe</coderef>".</dd>
          <dt>If the user agent is <em>not</em> did not recognize one or more <var title="true">parameters</var></dt>
          <dd>Return "<coderef prefix="istypesupportedresult">maybe</coderef>".</dd>
          <dt>Otherwise</dt>
          <dd>Return <var title="true">probably result</var>.</dd>
        </dl>
      </li>
      
      <li><p>If <var title="true">capability</var> is an empty string, return the <a href="#dom-istypesupportedempty">empty string</a> and abort these steps.</p></li>
      <li><p>If the <var title="true">keySystem</var> implementation does not support <var title="true">capability</var>, return the <a href="#dom-istypesupportedempty">empty string</a> and abort these steps. String comparison is case-sensitive.</p></li>
      <li><p>Follow the steps for the first matching condition from the following list:</p>
        <dl class="switch">
          <dt>If the user agent is <em>not</em> confident that the <var title="true">keySystem</var> implementation supporting <var title="true">initDataType</var> is available and usable to decrypt and enable playback of support playback of encrypted <videoanchor name="media-data">media data</videoanchor> for all <var title="true">media types</var> as specified by <var title="true">capability</var></dt>
          <dd>Return "<coderef prefix="istypesupportedresult">maybe</coderef>".</dd>
          <dt>If the user agent is <em>not</em> did not recognize one or more <var title="true">parameters</var></dt>
          <dd>Return "<coderef prefix="istypesupportedresult">maybe</coderef>".</dd>
          <dt>Otherwise</dt>
          <dd>Return <var title="true">probably result</var>.</dd>
        </dl>
      </li>
    </ol>
    

<!-- Begin MediaKeySession -->
    <p>The <codedfn>error</codedfn> attribute is a <coderef>MediaKeyError</coderef> representing the current error state of the session. It is null if there is no error.</p>

    <p>The <codedfn prefix="session">keySystem</codedfn> attribute identifies the <a href="#key-system">Key System</a> of the <coderef>MediaKeys</coderef> that created the session.</p>

    <p>The <codedfn>sessionId</codedfn> attribute is the <a href="#session-id">Session ID</a> for this object and the associated key(s) or license(s).</p>

    <p>The <codedfn>usableKeyIds</codedfn> attribute is an array of key IDs for keys in the session that are currently usable to decrypt <videoanchor name="media-data">media data</videoanchor>.
      Each element must be unique.
    </p>

    <p>The <codedfn>closed</codedfn> attribute signals when object becomes closed as a result of the <a href="#algorithms-session-close">Session Close</a> algorithm being run.
    This promise can only be fulfilled and is never rejected.</p>

    <p>The <methoddfn name="update">update(<var title="true">response</var>)</methoddfn> method provides messages, including licenses, to the CDM. It must run the following steps:</p>
    <p class="non-normative">The contents of <var title="true">response</var> are <var title="true"><a href="#key-system">keySystem</a></var>-specific.</p>

    <ol>
      <li><p>If <var title="true">response</var> is an empty array, return a promise rejected with a new <code><dom4ref name="exception-domexception">DOMException</dom4ref></code> whose name is <code><a href="#dfn-InvalidAccessError">"InvalidAccessError"</a></code> and that has the message "The response parameter is empty."</p></li>
      <li><p>Let <var>message</var> be a copy of the contents of the <var title="true">response</var> parameter.</p></li>
      <li><p>Let <var>promise</var> be a new promise.</p></li>
      <li><p>Run the following steps asynchronously:</p>
        <ol>
          <li><p>Let <var title="true">cdm</var> be the <var title="true">cdm</var> loaded in <methodref>create</methodref>.</p></li>
          <li><p>Let <var title="true">request</var> be null.</p></li>
          <li><p>Let <var title="true">destination URL</var> be null.</p></li>
          <li><p>Use the <var title="true">cdm</var> to execute the following steps:</p>
            <ol>
              <li><p>Process <var>message</var></p>
                <p>If <var>message</var> contains keys, a license, or similar data, follow the stipulation for the first matching condition from the following list:</p>
                <dl class="switch">
                  <dt>If <var title="true">sessionType</var> is "<coderef prefix="sessiontype">temporary</coderef>" and the license does not specify it should be stored</dt>
                  <dd>Do not store the license or other data contained in <var>message</var>.</dd>
                  <dt>If <var title="true">sessionType</var> is "<coderef prefix="sessiontype">persistent</coderef>" and the license permits storage</dt>
                  <dd>Store the license or other data contained in <var>message</var>.</dd>
                  <dt>Otherwise</dt>
                  <dd>Fail with an appropriate <a href="#mediakeyerror-names">error name</a> and message.</dd>
                </dl>
                <p class="non-normative">Note: When <var>message</var> contains key(s) and/or related data, <var title="true">cdm</var> will likely cache the key and related data indexed by key ID.</p>
                <p class="non-normative">Note: The replacement algorithm within a session is <a href="#key-system">Key System</a>-dependent.</p>
                <p class="non-normative">Note: Keys from different sessions should be cached independently such that closing one session does not affect keys in other sessions, even if they have overlapping key IDs.</p>
                <p class="non-normative">Note: It is recommended that CDMs support a standard and reasonably high minimum number of keys per <coderef>MediaKeySession</coderef> object, including a standard replacement algorithm, and a standard and reasonably high minimum number of <coderef>MediaKeySession</coderef> objects.
                This enables a reasonable number of key rotation algorithms to be implemented across user agents and may reduce the likelihood of playback interruptions in use cases that involve various streams in the same element (i.e. adaptive streams, various audio and video tracks) using different keys.
                </p>
              </li> 
              <li><p>If the set of usable keys changed, run the <a href="#algorithms-update-usable-key-ids">Update Usable Key IDs</a> algorithm on the <var title="true">session</var>.</p>
                <p>The algorithm may also be run later should additional processing be necessary.</p>
              </li>
              <li><p>If another message needs to be sent to the server, execute the following steps:</p>
                <ol>
                  <li><p>Let <var title="true">request</var> be that message.</p></li>
                  <li><p>If there is a specific destination URL for the message, let <var title="true">destination URL</var> be that URL. The URL may be validated and/or normalized.</p></li>
                </ol>
              </li>
            </ol>
          </li>
          <li><p>If any of the preceding steps failed, reject <var>promise</var> with a new <code><dom4ref name="exception-domexception">DOMException</dom4ref></code> whose name is the appropriate <a href="#mediakeyerror-names">error name</a> and that has an appropriate message.</p></li>
          <li>
            <p>If the associated <a href="#media-element">media element(s)</a> are <a href="#waiting-for-a-key">waiting for a key</a>, <queue-a-task/> to attempt to resume playback.</p>
            <p class="non-normative">In other words, resume playback if the necessary key is provided.</p>
            <p>The user agent may choose to skip this step if it knows resuming will fail <span class="non-normative">(i.e. no usable key was added)</span>.</p>
          </li>
          <li><p>If <var title="true">request</var> is not null, run the <a href="#algorithms-queue-message">Queue a "message" Event</a> algorithm on the <var title="true">session</var>, providing <var title="true">request</var> and <var title="true">destination URL</var>.</p></li>
          <li><p>Resolve <var>promise</var> with <code>undefined</code>.</p></li>
        </ol>
      </li>
      <li><p>Return <var>promise</var>.</p></li>
    </ol>

    <p>The <methoddfn name="close">close()</methoddfn> method allows an application to indicate that it no longer needs the session and the CDM should release any resources associated with this object and close it.
    <span class="non-normative">The returned promise is resolved when the request has been processed, and the <codedfn>closed</codedfn> attribute promise is resolved when the session is closed.</span>
    It must run the following steps:</p>

    <ol>
      <li><p>If the <a href="#algorithms-session-close">Session Close</a> algorithm has been run on this object, return a promise fulfilled with <code>undefined</code>.</p></li>
      <li><p>Let <var>promise</var> be a new promise.</p></li>
      <li><p>Run the following steps asynchronously:</p>
        <ol>
          <li><p>Let <var title="true">cdm</var> be the <var title="true">cdm</var> loaded in <methodref>create</methodref>.</p></li>
          <li><p>Use the <var title="true">cdm</var> to execute the following steps:</p>
            <ol>
              <li>
                <p>Process the close request.</p>
                <p>Do not remove stored session data.</p>
              </li>
              <li><p>If the previous step caused the session to be closed, run the <a href="#algorithms-session-close">Session Close</a> algorithm on this object.</p></li>
            </ol>
          </li>
          <li><p>Resolve <var>promise</var> with <code>undefined</code>.</p></li>
        </ol>
      </li>
      <li><p>Return <var>promise</var>.</p></li>
    </ol>

    <p>The <methoddfn name="remove">remove()</methoddfn> method allows an application to remove stored session data associated with this object.
    It must run the following steps:</p>

    <ol>
      <li><p>If the session type is not "<coderef prefix="sessiontype">persistent</coderef>", return a promise rejected with a new <code><dom4ref name="exception-domexception">DOMException</dom4ref></code> whose name is <code><a href="#dfn-InvalidAccessError">"InvalidAccessError"</a></code> and that has the message "The operation is not supported on <var title="true">session type</var> sessions."</p></li>
      <li><p>If the <a href="#algorithms-session-close">Session Close</a> algorithm has been run on this object, return a promise rejected with a new <code><dom4ref name="exception-domexception">DOMException</dom4ref></code> whose name is <code><a href="#dfn-InvalidStateError">"InvalidStateError"</a></code> and that has the message "The session is closed."</p></li>
      <li><p>Let <var>promise</var> be a new promise.</p></li>
      <li><p>Run the following steps asynchronously:</p>
        <ol>
          <li><p>Let <var title="true">cdm</var> be the <var title="true">cdm</var> loaded in <methodref>create</methodref>.</p></li>
          <li><p>Use the <var title="true">cdm</var> to execute the following steps:</p>
            <ol>
              <li>
                <p>Process the remove request.</p>
                <p>This may involve exchanging message(s) with the application.</p>
                <p>Unless this step fails, the CDM must have cleared all stored session data associated with this object, including the <coderef>sessionId</coderef>, before proceeding to the next step.
                  <span class="non-normative">(A subsequent call to <methodref>loadSession</methodref> with <coderef>sessionId</coderef> would fail because there is no data stored for the <var title="true">sessionId</var>.)</span>
                </p>
              </li>
            </ol>
          </li>
          <li><p>Run the following steps asynchronously once the above step has completed:</p>
            <ol>
              <li><p>If any of the preceding steps failed, reject <var>promise</var> with a new <code><dom4ref name="exception-domexception">DOMException</dom4ref></code> whose name is the appropriate <a href="#mediakeyerror-names">error name</a> and that has an appropriate message.</p></li>
              <li><p>Run the <a href="#algorithms-session-close">Session Close</a> algorithm on this object.</p></li>
              <li><p>Resolve <var>promise</var> with <code>undefined</code>.</p></li>
            </ol>
          </li>
        </ol>
      </li>
      <li><p>Return <var>promise</var>.</p></li>
    </ol>

<!-- Begin HTMLSourceElement -->
    <p>The <codedfn prefix="source">keySystem</codedfn> attribute of <coderef>HTMLSourceElement</coderef> specifies the <a href="#key-system">Key System</a> to be used with the <videoref name="media-resource">media resource</videoref>. The <coderef prefix="source">keySystem</coderef> attribute must be supported by all HTMLSourceElement as both an IDL attribute and also a content attribute named <codedfn prefix="sourcecontent">keysystem</codedfn>.
    The <resource-selection-algorithm/> is modified to check the <coderef prefix="source">keySystem</coderef> attribute after the existing <em>step 5</em> of the <em>Otherwise</em> branch of <em>step 6</em>:
    </p>
    <ol start="6">
      <li><p>&#8987; If <var title="">candidate</var> has a <coderef prefix="source">keySystem</coderef> attribute whose value represents a <a href="#key-system">Key System</a> that the user agent knows it cannot use with <videoref name="attr-source-type">type</videoref>, then end the <synchronous-section/>, and jump down to the <i title="">failed</i> step below.</p></li>
    </ol>

    <h3 id="exceptions">2.1. Exceptions</h3>
    <p>The methods report errors by rejecting the the returned promise with a <code><dom4ref name="exception-domexception">DOMException</dom4ref></code>.
    The following <dom4ref name="error-names">DOMException names from DOM4</dom4ref> are used with messages as shown in the following table.
    In cases where the exact name is not specified in the algorithm, the message may differ to reflect the actual error.
    </p>

    <!-- TODO: Some of the method algorithms refer to Error Names from the next section. Combine these sections and/or change the references to use this section. -->
    <table>
      <tbody>
        <tr>
          <th>Name</th>
          <th>Possible Messages (optional)</th>
        </tr>
        <tr>
          <td><dfn id="dfn-NotSupportedError"><code>NotSupportedError</code></dfn></td>
          <td>
            The existing MediaKeys object cannot be removed.<br/>
            The key system <em>name</em> is not supported.<br/>
            The initialization data type <em>type</em> is not supported by the key system.<br/>
            <em>type</em> sessions are not supported by the key system.<br/>
            The operation is not supported by the key system.<br/>
            The session is closed.
          </td>
        </tr>
        <tr>
          <td><dfn id="InvalidStateError"><code>InvalidStateError</code></dfn></td>
          <td>The existing MediaKeys object cannot be removed at this time.</td>
        </tr>
        <tr>
          <td><dfn id="dfn-InvalidAccessError"><code>InvalidAccessError</code></dfn></td>
          <td>
            The <em>name</em> parameter is empty.<br/>
            The operation is not supported on <em>session type</em> sessions.
          </td>
        </tr>
        <tr>
          <td><dfn id="dfn-QuotaExceededError"><code>QuotaExceededError</code></dfn></td>
          <td>The MediaKeys object cannot be used with additional HTMLMediaElements.</td>
        </tr>
      </tbody>
    </table>

    <h3 id="mediakeyerror">2.2. MediaKeyError</h3>
    <div class="issue"><div class="issue-title"><span>Issue 3</span></div><p class=""><a href="https://www.w3.org/Bugs/Public/show_bug.cgi?id=21798">Bug 21798</a> - The future of error events and MediaKeyError is uncertain.</p></div>
    <h4 id="mediakeyerror">2.2.1. Interface</h4>
    <pre class="idl">
[<a href="#dom-mediakeyerror-constructor">Constructor</a>(DOMString <a href="#mediakeyerror-names">name</a>, unsigned long <precoderef>systemCode</precoderef>, optional DOMString message = "")]
interface <precodedfn>MediaKeyError</precodedfn> : <dom4ref name="domexception">DOMException</dom4ref> {
  readonly attribute unsigned long <precoderef>systemCode</precoderef>;
};
</pre>

    <div class="impl">
    <p>The <dfn id="dom-mediakeyerror-constructor"><code>MediaKeyError</code></dfn> constructor must return a new <coderef>MediaKeyError</coderef> object whose <coderef>systemCode</coderef> property is initialized to <var title="true">systemCode</var> and inherited properties are initialized by passing <var title="true">name</var> and <var title="true">message</var> to the <code><dom4ref name="domexception">DOMException</dom4ref></code> algorithm.</p>

    <p>The <codedfn>systemCode</codedfn> attribute of a <coderef>MediaKeySession</coderef> object is a <a href="#key-system">Key System</a>-specific value for the error that occurred.
    <span class="non-normative">This allows a more granular status to be returned than the more general <a href="#mediakeyerror-names">name</a>.</span>
    It should be 0 if there is no associated status code or such status codes are not supported by the Key System.
    </p>
    </div>

    <h4 id="mediakeyerror-names">2.2.2. Error Names</h4>

    <p>The tables below list all the allowed error names for the <code>name</code> property along with a description. The message may be key system-specific.</p>

    <div class="issue"><div class="issue-title"><span>Issue 4</span></div><p class=""><a href="https://www.w3.org/Bugs/Public/show_bug.cgi?id=21798">Bug 21798</a> - The additional error names are yet to be defined.</p></div>

    <p>The following <dom4ref name="error-names">DOMException names from DOM4</dom4ref> may be used as shown in the following table:</p>
    <table>
      <tbody>
        <tr>
          <th>Name</th>
          <th>Use</th>
        </tr>
      </tbody>
    </table>

    <p>The following new DOMException names are defined by this specification:</p>
    <table>
      <tbody>
        <tr>
          <th>Name</th>
          <th>Use</th>
        </tr>
      </tbody>
    </table>

    <h3 id="media-element-restictions">2.3 Media Element Restrictions</h3>
    <non-normative-section/>
    <p>Media data processed by a CDM may not be available through Javascript APIs in the usual way (for example using the CanvasRenderingContext2D drawImage() method and the AudioContext MediaElementAudioSourceNode).
    This specification does not define conditions for such non-availability of media data, however, if media data is not available to Javascript APIs then these APIs may behave as if no media data was present at all.</p>
    <p>Where media rendering is not performed by the UA, for example in the case of a hardware protected media pipeline, then the full set of HTML rendering capabilities, for example CSS Transforms, may not be available. One likely restriction is that
    video media may be constrained to appear only in rectangular regions with sides parallel to the edges of the window and with normal orientation.</p>

    <h2 id="events">3. Events</h2>

    <h3 id="event-definitions">3.1. Event Definitions</h3>
    <pre class="idl">
[Constructor(DOMString type, optional <precoderef>MediaKeyNeededEventInit</precoderef> eventInitDict)]
interface <precodedfn>MediaKeyNeededEvent</precodedfn> : <dom4ref name="event">Event</dom4ref> {
  readonly attribute DOMString <precoderef>initDataType</precoderef>;
  readonly attribute Uint8Array? <precoderef>initData</precoderef>;
};

dictionary <precodedfn>MediaKeyNeededEventInit</precodedfn> : <dom4ref name="eventinit">EventInit</dom4ref> {
  DOMString <precoderef>initDataType</precoderef>;
  Uint8Array? <precoderef>initData</precoderef>;
};</pre>

    <pre class="idl">
[Constructor(DOMString type, optional <precoderef>MediaKeyMessageEventInit</precoderef> eventInitDict)]
interface <precodedfn>MediaKeyMessageEvent</precodedfn> : <dom4ref name="event">Event</dom4ref> {
  readonly attribute Uint8Array <precoderef>message</precoderef>;
  readonly attribute DOMString? <precoderef>destinationURL</precoderef>;
};

dictionary <precodedfn>MediaKeyMessageEventInit</precodedfn> : <dom4ref name="eventinit">EventInit</dom4ref> {
  Uint8Array <precoderef>message</precoderef>;
  DOMString? <precoderef>destinationURL</precoderef>;
};</pre>

    <dl class="domintro">
     <dt><var title="">event</var> . <coderef>initDataType</coderef></dt>
     <dd>
       <p>Returns a string indicating the <a href="#initialization-data-type">initialization data type</a> of the <a href="#initialization-data">Initialization Data</a> related to the event.</p>
     </dd>
     <dt><var title="">event</var> . <coderef>initData</coderef></dt>
     <dd>
       <p>Returns the <a href="#initialization-data">Initialization Data</a> related to the event.</p>
     </dd>
     <dt><var title="">event</var> . <coderef>message</coderef></dt>
     <dd>
       <p>Returns the message <span class="non-normative">(i.e. license request)</span> to send.</p>
     </dd>
     <dt><var title="">event</var> . <coderef>destinationURL</coderef></dt>
     <dd>
       <p>Returns the URL to which the <coderef>message</coderef> should be sent.</p>
     </dd>
    </dl>
    <div class="impl">
    <p>The <codedfn>initDataType</codedfn> attribute contains a string indicating the <a href="#initialization-data-type">initialization data type</a> specific to the event. The format of the <coderef>initData</coderef> will vary according to the <coderef>initDataType</coderef>.</p>
    <p>The <codedfn>initData</codedfn> attribute contains <a href="#initialization-data">Initialization Data</a> specific to the event.</p>
    <p>The <codedfn>message</codedfn> attribute contains a message from the CDM. Messages are Key System-specific. <span class="non-normative">In most cases, it should be sent to a key server.</span></p>
    <p>The <codedfn>destinationURL</codedfn> is the URL to which the <coderef>message</coderef> should be sent.
       It may be null.
       An application <em>may</em> choose not to send the message to this URL.
       Implementations may validate and/or normalize the URL, which could result in a value that is different from the original or null. Applications should not assume that the value of this attribute will be identical across implementations.
    </p>
    </div>

    <h3 id="event-summary">3.2. Event Summary</h3>
    <non-normative-section/>

    <p>The following event is fired at <coderef>HTMLMediaElement</coderef>.</p>
    <table>
      <thead>
        <tr>
          <th>Event name</th>
          <th>Interface</th>
          <th>Dispatched when...</th>
          <th>Preconditions</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td><codedfn>needkey</codedfn></td>
          <td><coderef>MediaKeyNeededEvent</coderef></td>
          <td>
            The user agent needs a key or license to begin or continue playback.
            <br></br><span class="non-normative"><br></br>It may have encountered <videoanchor name="media-data">media data</videoanchor> that may/does require decryption to load or play OR need a new key/license to continue playback.</span>
          </td>
          <td><readystate/> is equal to <have-metadata/> or greater.
          <span class="non-normative">It is possible that the element is playing or has played.</span>
          </td>
        </tr>
      </tbody>
    </table>

    <p>The following events are fired at <coderef>MediaKeySession</coderef>.</p>
    <table>
      <thead>
        <tr>
          <th>Event name</th>
          <th>Interface</th>
          <th>Dispatched when...</th>
          <th>Preconditions</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td><codedfn prefix="event">error</codedfn></td>
          <td><code><dom4ref name="event">Event</dom4ref></code></td>
          <td>An error occurs in the session.</td>
          <td><!-- No Preconditions. --></td>
        </tr>
        <tr>
          <td><codedfn prefix="event">keyschange</codedfn></td>
          <td><code><dom4ref name="event">Event</dom4ref></code></td>
          <td>There has been a change in usable keys.</td>
          <td><!-- No Preconditions. --></td>
        </tr>
        <tr>
          <td><codedfn prefix="event">message</codedfn></td>
          <td><coderef>MediaKeyMessageEvent</coderef></td>
          <td>
            A message has been generated <span class="non-normative">(and likely needs to be sent to a server)</span>.
            <span class="non-normative">For example, a license request has been generated as the result of a <methodref>createSession</methodref> call or another message must be sent in response to an <methodref>update</methodref> call.</span>
          </td>
          <td><!-- No Preconditions. --></td>
        </tr>
      </tbody>
    </table>


    <h2 id="algorithms">4. Algorithms</h2>

    <h3 id="algorithms-initdata-encountered">4.1. Initialization Data Encountered</h3>
    <p>The following steps are run when the <a href="#media-element">media element</a> encounters <a href="#initialization-data">Initialization Data</a> in the <videoanchor name="media-data">media data</videoanchor> during the <resource-fetch-algorithm/>:</p>

    <ol>
      <li><p>Let <var title="">initDataType</var> be the empty string.</p></li>
      <li><p>Let <var title="">initData</var> be null.</p></li>
      <li>
        <p>If the <videoanchor name="media-data">media data</videoanchor> is <cors-same-origin/>, run the following steps:</p>
        <ol>
          <li><p>Let <var title="">initDataType</var> be the string representing the <a href="#initialization-data-type">initialization data type</a> of that initialization data.</p></li>
          <li><p>Let <var title="">initData</var> be that initialization data.</p></li>
        </ol>
      </li>
      <li>
        <p><Queue-a-task/> to <fire-a-simple-event/> named <coderef>needkey</coderef> at the <a href="#media-element">media element</a>.</p>
        <p>The event is of type <coderef>MediaKeyNeededEvent</coderef> and has:</p>
        <ul style="list-style-type:none"><li>
          <coderef>initDataType</coderef> = <var title="">initDataType</var><br></br>
          <coderef>initData</coderef> = <var title="">initData</var>
        </li></ul>
        <p class="non-normative">Firing this event allows the application to begin acquiring the key process before it is needed.</p>
        <p class="non-normative">Note that <readystate/> is <em>not</em> changed and no algorithms are aborted. This event merely provides information.</p>
        <p class="non-normative">Note that if the media is not <cors-same-origin/> then the initData will be null. This allows applications that can retrieve initData from an alternative source to continue. Applications with no way to retrieve initData may wish to consider aborting playback in this case.</p>
      </li>

      <li><p><i>Continue Normal Flow</i>: Continue with the existing media element's <resource-fetch-algorithm/>.</p></li>
    </ol>

    <h3 id="algorithms-encrypted-block">4.2. Encrypted Block Encountered</h3>
    <p>The following steps are run when the <a href="#media-element">media element</a> encounters a block <span class="non-normative">(i.e. frame)</span> of encrypted <videoanchor name="media-data">media data</videoanchor> during the <resource-fetch-algorithm/>:</p>

    <ol>
      <li><p>If the media element's <coderef prefix="attr">mediaKeys</coderef> attribute is not null, run the following steps:</p>
        <ol>
          <li><p>Let <var title="true">media keys</var> be the <coderef>MediaKeys</coderef> object referenced by that atribute.</p></li>
          <li><p>Let <var title="true">cdm</var> be the <var title="true">cdm</var> loaded during the <a href="#dom-mediakeys-create">initialization</a> of the <var title="true">media keys</var>.</p></li>
          <li><p>If there is at least one <coderef>MediaKeySession</coderef> created by the <var title="true">media keys</var> on which the <a href="#algorithms-session-close">Session Close</a> algorithm has not been run, run the following steps:</p>
            <p class="non-normative">This check ensures the <var title="true">cdm</var> has finished loading and is a prequisite for a matching key being available.</p>
            <ol>
              <li><p>Let the <var title="true">block key ID</var> be the key ID of the current block <span class="non-normative">(as specified by the container)</span>.</p></li>
              <li><p>Use the <var title="true">cdm</var> to execute the following steps:</p>
                <ol>
                  <li><p>Let <var title="true">available keys</var> be the union of keys in sessions that were created by the <var title="true">media keys</var>.</p></li>
                  <li><p>Follow the steps for the first matching condition from the following list:</p>
                <!-- TODO: Fix indentation. -->
                <dl class="switch">
                <dt>If any of the <var title="true">available keys</var> corresponds to the <var title="">block key ID</var> and is usable</dt>
                <dd>Run the following steps:
                  <ol>
                    <li><p>Let <var title="">block key</var> be the matching key.</p>
                      <p class="non-normative">Note: If multiple sessions contain a <em>usable</em> key for the <var title="">block key ID</var>, which key to use is <a href="#key-system">Key System</a>-dependent.</p>
                    </li>
                    <li><p>Use the <var title="true">cdm</var> to decrypt the block using <var title="">block key</var>.</p></li>
                    <li><p>Follow the steps for the first matching condition from the following list:</p>
                      <dl class="switch">
                        <dt>If decryption fails</dt>
                        <dd>Abort the media element's <resource-fetch-algorithm/>, run the steps to report a <videoref name="dom-mediaerror-media_err_decode">MEDIA_ERR_DECODE</videoref> error, and abort these steps.</dd>
                        <dt>Otherwise</dt>
                        <dd>Abort these steps and process the decrypted block as normal. <span class="non-normative">(Decode the block.)</span></dd>
                      </dl>
                      <p class="non-normative">Note: Not all decryption problems (i.e. using the wrong key) will result in a decryption failure. In such cases, no error is fired here but one may be fired during decode.</p>
                    </li>
                  </ol>
                </dd>
                <dt>If any of the <var title="true">available keys</var> corresponds to the <var title="">block key ID</var> and is unusable</dt>
                <dd>Run the following steps:
                  <ol>
                    <li><p>Let <var title="true">session</var> be the <coderef>MediaKeySession</coderef> object associated with that session.</p></li>
                    <li><p>Run the <a href="#algorithms-queue-error">Queue an "error" Event</a> algorithm on the <var title="true">session</var>, providing the appropriate <a href="#mediakeyerror-names">error name</a> and system code value, if provided, and 0 otherwise.</p></li>
                    <li><p>Abort these steps.</p></li>
                  </ol>
                </dd>
                <dt class="non-normative">Otherwise (there is no key for the <var title="true">block key ID</var> in any session)</dt>
                <dd class="non-normative">Continue.</dd>
                </dl>
                  </li>
                </ol>
              </li>
            </ol>
          </li>
        </ol>
      </li>
      <li>
        <p>Abort these steps and wait for a signal to resume playback.</p>
        <p class="non-normative">There is no usable key for the block.</p>
        <p class="non-normative">If playback stops because the stream cannot be decrypted when the <a href="#media-element">media element</a> is <videoref name="potentially-playing">potentially playing</videoref>, the media element is said to be <a href="#waiting-for-a-key">waiting for a key</a>.</p>
      </li>
    </ol>

    <div class="non-normative">
    <p>For frame-based encryption, this may be implemented as follows when the media element attempts to decode a frame as part of the <resource-fetch-algorithm/>:</p>
    <ol>
      <li><p>Let <var title="">encrypted</var> be false.</p></li>
      <li><p>Detect whether the frame is encrypted.</p>
        <dl class="switch">
          <dt>If the frame is encrypted</dt>
          <dd>Run the steps above.</dd>
          <dt>Otherwise</dt>
          <dd>Continue.</dd>
        </dl>
      </li>
      <li><p>Decode the frame.</p></li>
      <li><p>Provide the frame for rendering.</p></li>
    </ol>
    </div>

    <p>The following paragraph is added to <videoanchor name="playing-the-media-resource">Playing the media resource</videoanchor>.</p>
    <ul style="list-style-type:none">
    <li>A <a href="#media-element">media element</a> is said to be <dfn id="waiting-for-a-key">waiting for a key</dfn> when
    it would be <videoref name="potentially-playing">potentially playing</videoref> but
    the user agent has reached a point in the <videoref name="media-resource">media resource</videoref> that must be decrypted for the resource to continue and the <a href="#cdm">CDM</a> does not have the necessary key.
    </li>
    <li class="non-normative">The media element leaves this state when seeking but could re-enter it if the same conditions exist.</li>

    <li>
      <p>It is possible for a media element to be playing media and encounter content that requires decryption keys.  To accommodate changes caused by key status, apply the first appropriate substeps from the following list:</p>

      <dl class="switch">
        <dt>If media element was previously playing and had a <coderef>waitingFor</coderef> value of "<coderef prefix="waitingfor">none</coderef>":</dt>
        <dd>If a readyState change queues a task to fire a <videoref name="event-media-waiting">waiting</videoref> event, the user agent must also set the <coderef>waitingFor</coderef> attribute on the Media Element to "<coderef prefix="waitingfor">data</coderef>".
        <br/>If decryption key(s) are needed to continue playback for any selected video track(s), enabled audio track(s), or "showing" or "hidden" text track(s), and the element has not ended playback, the user agent must set the <coderef>waitingFor</coderef> attribute on the Media Element to "<coderef prefix="waitingfor">key</coderef>", queue a task to fire a simple event named <videoref name="event-media-timeupdate">timeupdate</videoref> at the element, and queue a task to fire a simple event named <videoref name="event-media-waiting">waiting</videoref> at the element.
        </dd>
        <dt>If media element was previously waiting and had a <coderef>waitingFor</coderef> value of "<coderef prefix="waitingfor">data</coderef>":</dt>
        <dd>If a readyState change queues a task to fire a <videoref name="event-media-canplay">canplay</videoref> event, the user agent must also set the <coderef>waitingFor</coderef> attribute on the Media Element to "<coderef prefix="waitingfor">none</coderef>".</dd>
        <dt>If media element was previously waiting and had a <coderef>waitingFor</coderef> value of "<coderef prefix="waitingfor">key</coderef>":</dt>
        <dd>If decryption key(s) become available that allow playback to proceed, the user agent must set the <coderef>waitingFor</coderef> attribute on the Media Element to "<coderef prefix="waitingfor">none</coderef>", queue a task to fire a simple event named <videoref name="event-media-timeupdate">timeupdate</videoref> at the element, and queue a task to fire a simple event named <videoref name="event-media-canplay">canplay</videoref> at the element.</dd>
      </dl>
    </li>
    </ul>

    <h3 id="algorithms-queue-message">4.3. Queue a "message" Event</h3>
    <p>The Queue a "message" Event algorithm is run when the CDM needs to queue a message event to a <coderef>MediaKeySession</coderef> object.
    Requests to run this algorithm include a target <coderef>MediaKeySession</coderef> object, a <var title="true">request</var>, and a <var title="true">destination URL</var>.
    </p>
    <p>The following steps are run:</p>
    <ol>
      <li><p>Let the <var title="true">session</var> be the specified <coderef>MediaKeySession</coderef> object.</p></li>
      <li>
        <p><Queue-a-task/> to <fire-a-simple-event/> named <coderef prefix="event">message</coderef> at the <var title="true">session</var>.</p>
        <p>The event is of type <coderef>MediaKeyMessageEvent</coderef> and has:</p>
        <ul style="list-style-type:none"><li>
          <coderef>message</coderef> = the specified <var title="true">request</var><br></br>
          <coderef>destinationURL</coderef> = the specified <var title="true">destination URL</var>
        </li></ul>
      </li>
    </ol>

    <h3 id="algorithms-queue-error">4.4. Queue an "error" Event</h3>
    <p>The Queue an "error" Event algorithm is run when the CDM needs to queue an error event to a <coderef>MediaKeySession</coderef> object.
    Requests to run this algorithm include a target <coderef>MediaKeySession</coderef> object, an <var title="true">error name</var>, and a <var title="true">system code</var>.
    </p>
    <p>The following steps are run:</p>
    <ol>
      <li><p>Let the <var title="true">session</var> be the specified <coderef>MediaKeySession</coderef> object.</p></li>
      <li><p>Create a new <coderef>MediaKeyError</coderef> object with the following attributes:</p>
        <ul style="list-style-type:none"><li>
          <code><dom4ref name="error-name">name</dom4ref></code> = <var title="true">error name</var><br></br>
          <coderef>systemCode</coderef> = <var title="true">system code</var>
        </li></ul>
      </li>
      <li><p>Set the <var title="true">session</var>'s <coderef>error</coderef> attribute to the error object created in the previous step.</p></li>
      <li><p><Queue-a-task/> to <fire-a-simple-event/> named <coderef prefix="event">error</coderef> at the <var title="true">session</var>.</p></li>
    </ol>

    <h3 id="algorithms-update-usable-key-ids">4.5. Update Usable Key IDs</h3>
    <p>The Update Usable Key IDs algorithm is run when the CDM changes the set of keys in the session that may be used for decryption.
    This can happen as the result of an <methodref>update</methodref> call or some other event.
    </p>
    <p>The following steps are run:</p>
    <ol>
      <li><p>Let the <var title="true">session</var> be the associated <coderef>MediaKeySession</coderef> object.</p></li>
      <li><p>Let <var title="true">usable key ids</var> be an Array containing the set of key IDs for which the session contains a currently usable key.</p></li>
      <li><p>Set the <var title="true">session</var>'s <coderef>usableKeyIds</coderef> attribute to <var title="true">usable key ids</var>.</p></li>
      <li><p><Queue-a-task/> to <fire-a-simple-event/> named <coderef prefix="event">keyschange</coderef> at the <var title="true">session</var>.</p></li>
    </ol>

    <h3 id="algorithms-session-close">4.6. Session Close</h3>
    <p>The Session Close algorithm is run when the CDM closes the session associated with a <coderef>MediaKeySession</coderef> object.</p>
    <p class="non-normative">The CDM may close a session at any point, such as in response to a <methodref>close</methodref> call, when the session is no longer needed, or when system resources are lost.
    Keys in other sessions should be unaffected, even if they have overlapping key IDs.
    </p>
    <p>The following steps are run:</p>
    <ol>
      <li><p>Let the <var title="true">session</var> be the associated <coderef>MediaKeySession</coderef> object.</p></li>
      <li><p>If the session initData of the <var title="true">session</var> is not empty, remove its entry from the <var title="true">list of active session Initialization Data</var> for the MediaKeys object that created the <var title="true">session</var>.</p></li><!-- Check for empty because loadSession() does not set session initData. -->
      <li><p>Set the <var title="true">session</var>'s <coderef>usableKeyIds</coderef> attribute to an empty Array.</p></li>
      <li><p>Let <var>promise</var> be the <coderef>closed</coderef> attribute of the <var title="true">session</var>.</p></li>
      <li><p>Resolve <var>promise</var> with <code>undefined</code>.</p></li>
    </ol>

    <h2 id="simple-decryption">5. Simple Decryption</h2>
    <p>All user agents must support the simple decryption capabilities described in this section regardless of whether they support a more advanced <a href="#cdm">CDM</a>.
    <span class="non-normative">This ensures that there is a common baseline level of protection that is guaranteed to be supported in all user agents, including those that are entirely open source.
    Thus, content providers that need only basic protection can build simple applications that will work on all platforms without needing to work with any content protection providers.</span>
    </p>

    <h3 id="simple-decryption-clear-key">5.1. Clear Key</h3>
    <p>The "org.w3.clearkey" <a href="#key-system">Key System</a> indicates a plain-text clear (unencrypted) key will be used to decrypt the source.
    No additional client-side content protection is required.
    Use of this Key System is described below.
    </p>
    
    <p>The <var title="true">keySystem</var> parameter and <coderef>keySystem</coderef> attributes are always <code>"org.w3.clearkey"</code>.
    The <coderef>sessionId</coderef> string is numerical.</p>

    <p>The <coderef>initData</coderef> attribute of the <coderef>needkey</coderef> event and the <var title="true">initData</var> parameter of <methodref>createSession</methodref> are the same container-specific <a href="#initialization-data">Initialization Data</a> format and values.
    <span class="non-normative">
    If supported, these values should provide some type of identification of the content or key that could be used to look up the key (since there is no defined logic for parsing it).
    For containers that support a simple key ID, it should be a binary array containing the raw key ID.
    For other containers, it may be some other opaque blob or null.</span>
    </p>

    
    <p>The <coderef>MediaKeyMessageEvent</coderef> generated by <methodref>createSession</methodref> has:</p>
    <ul style="list-style-type:none"><li>
      <coderef>message</coderef> = a container-specific value extracted from the <var title="true">initData</var> parameter of <methodref>createSession</methodref>. null if <var title="true">initData</var> was null or a value could not be extracted.<br></br>
      <coderef>destinationURL</coderef> = value of the default URL if present in the <videoanchor name="media-data">media data</videoanchor> and null otherwise.
    </li></ul>

    <p>The <var title="true">response</var> parameter of <methodref>update</methodref> should be a JSON Web Key (JWK) representation of the symmetric key to be used for decryption, as defined in the <a href="http://tools.ietf.org/html/draft-ietf-jose-json-web-key">IETF Internet-draft JSON Web Key (JWK) specification</a>. The JSON string is encoded into the Uint8Array parameter using <ascii-encoding />.</p>
    <p>When the JWK 'key type' ("kty") member value is 'octet sequence' ("oct"), the 'key value' ("k") member will be a base64 encoding of the octet sequence containing the symmetric key value.</p>
    <p>For example, the following contains a single symmetric key represented as a JWK, designated as being for use with the AES Key Wrap algorithm (line breaks are for readability, only).</p>

    <div class="example">
      <pre class="code">
{
  "keys": 
    [{
      "kty":"oct",
      "alg":"A128KW",
      "kid":"67ef0gd8pvfd0=",
      "k":"GawgguFyGrWKav7AX4VKUg"
    }]
}</pre>
    </div>

    <h2 id="security">6. Security Considerations</h2>
    <div class="nonnormative">

    <div class="issue"><div class="issue-title"><span>Issue 5</span></div>Note: This section is not final and review is welcome.</div>

    <p>Key system implementations must consider initialization data, key data and media data as potential attack vectors and must take care to safely parse, decrypt etc. initialization data, key data and media data. User Agents may want to validate data before passing it to the CDM, especially if the CDM does not run in the same (sandboxed) context as the DOM (i.e. rendering). </p>
    <p>User Agents should treat media data, key data, URLs, and any other data from the application as untrusted content and use appropriate safeguards to mitigate any associated threats.</p>
    <p>User Agents are responsible for providing users with a secure way to browse the web. Since User Agents may integrate with third party CDM implementations, CDM implementers must provide sufficient information and controls to user agent implementers to enable them to properly asses the security implications of integrating with the Key System.</p>
    <p>Note: Unsandboxed CDMs (or CDMs that use platform features) and UAs that use them must be especially careful in all areas of security, including parsing of key and media data, etc. due to the potential for compromises to provide access to OS/platform features, interact with or run as root, access drivers, kernel, firmware, hardware, etc., all of which may not be written to be robust against hostile software or web-based attacks. Additionally, CDMs may not be updated with security fixes as frequently, especially when part of the OS, platform or hardware.</p>
    
    </div>
    <h2 id="privacy">7. Privacy Considerations</h2>
    <div class="nonnormative">

    <div class="issue"><div class="issue-title"><span>Issue 6</span></div>Note: This section is not final and review is welcome.</div>
 
    <p>The presence or use of Key Systems on a user's device raises a number of privacy issues, falling into two categories: (a) user-specific information that may be disclosed by the EME interface itself, or within messages from Key Systems and (b) user-specific information that may be persistently stored on the users device.</p>
    <p>User Agents should take responsibility for providing users with adequate control over their own privacy. Since User Agents may integrate with third party CDM implementations, CDM implementers must provide sufficient information and controls to user agent implementers to enable them to implement appropriate techniques to ensure users have control over their privacy, including but not limited to the techniques described below.</p>

    <h3 id="privacy-disclosure">7.1. Information Disclosed by EME and Key Systems</h3>
    <p>Concerns regarding information disclosed by EME and Key Systems fall into two categories, concerns about non-specific information that may nevertheless contribute to the possibility of fingerprinting a user agent or device and user-specific information that may be used directly for user tracking.</p>

    <h4 id="privacy-fingerprinting">7.1.1 Fingerprinting</h4>
    <p>Malicious applications may be able to fingerprint users or user agents by detecting or enumerating the list of key systems that are supported and related information. If proper origin protections are not provided this could include detection of sites that have been visited and information stored for those sites. In particular, Key Systems should not share key or other data between sites that are not CORS-same-origin.</p>

    <h4 id="privacy-tracking">7.1.2 Information Leakage</h4>
    <p>CDMs, especially those implemented outside the user agent, may not have the same fundamental isolations as the web platform.
    It is important that steps be taken to avoid information leakage, especially across origins.
    This includes both in-memory and stored data.
    Failure to do so could lead to information leakage to/from Incognito/Private Browsing sessions, across profiles, and even across different operating system user accounts.
    </p>
    
    <p>To avoid such issues, user agent and CDM implementations should ensure that:</p>
    <ul>
      <li>CDMs have a concept of a CDM instance that is associated 1:1 with a MediaKeys object.</li>
      <li>Keys, licenses, other session data, and the presence of sessions are restricted to the the CDM instance associated with the MediaKeys object that created the session.</li>
      <li>Session data is not shared between MediaKeys objects or CDM instances.</li>
      <li>Session data is not shared with media elements not associated with the MediaKeys object that created the session. Among other things, this means a session's keys may not be used to decrypt content loaded by a media element whose <coderef prefix="attr">mediaKeys</coderef> attribute is not the MediaKeys object.</li>
      <li>MediaKeys objects and the underlying implementation do not expose information outside the origin.</li>
      <li>Persisted session data, if applicable, is stored on a per-origin basis.</li>
      <li>Only data stored by the requesting origin may be loaded.</li>
    </ul>

    <h4 id="privacy-tracking">7.1.3 Tracking</h4>
    <p>User-specific information may be obtained over the EME API in two ways: through detection of stored keys and through Key System messages.</p>

    <p>Key Systems may access or create persistent or semi-persistent identifiers for a device or user of a device. In some cases these identifiers may be bound to a specific device in a secure manner. If these identifiers are present in Key System messages, then devices and/or users may be tracked. If the mitigations below are not applied this could include both tracking of users / devices over time and associating multiple users of a given device. If not mitigated, such tracking may take three forms depending on the design of the Key System:</p>
    <ul>
      <li>In all cases, such identifiers are expected to be available to sites and/or servers that fully support the Key System (and thus can interpret Key System messages) enabling tracking by such sites.</li>
      <li>If identifiers exposed by Key Systems are not origin-specific, then two sites and/or servers that fully support the Key System may collude to track the user</li>
      <li>If a Key System messages contains information derived from a user identifier in a consistent manner, for example such that a portion of the initial Key System message for a specific content item does not change over time and is dependent on the user identifier, then this information could be used by any application to track the device or user over time.</li>
    </ul>

    <p>If a Key System permits keys to be stored and to be re-used between origins, then it may be possible for two origins to collude and track a unique user by recording their ability to access a common key.</p>
    <p>Finally, if any user interface for user control of Key Systems presents data separately from data in HTTP session cookies or persistent storage, then users are likely to modify site authorization or delete data in one and not the others. This would allow sites to use the various features as redundant backup for each other, defeating a user's attempts to protect his privacy.</p>
    <p>There are a number of techniques that can be used to mitigate these risks of tracking without user consent:</p>

    <dl>
      <dt>User deletion of persistent identifiers</dt>
      <dd>User agents could provide users with the ability to clear any persistent identifiers maintained by Key Systems.</dd>

      <dt>Use of (non-reversible) per-origin identifiers</dt>
      <dd>The user / device identifier exposed by a Key System may be different for each origin, either by allocation of different identifiers for different origins or by use of a non-reversible origin-specific mapping from an origin-independent identifier.</dd>

      <dt>Encryption of user identifiers</dt>
      <dd>User identifiers in Key System messages could be encrypted, together with a timestamp or nonce, such that the Key System messages are always different. This would prevent the use of Key System messages for tracking except by applications fully supporting the Key System.</dd>

      <dt>Site-specific white-listing of access to each Key System</dt>
      <dd>User agents could require the user to explicitly authorize access by each site to each Key System. User agents should enable users to revoke this authorization either temporarily or permanently.</dd>

      <dt>Treating Key System persistent identifiers as cookies</dt>
      <dd>User agents should present the presence of persistent identifiers stored by Key Systems to the user in a way that associates them strongly with HTTP session cookies. This might encourage users to view such identifiers with healthy suspicion.</dd>

      <dt>Shared blacklists</dt>
      <dd>User agents may allow users to share their Key System domain blacklists. This would allow communities to act together to protect their privacy.</dd>

      <dt>User alerts / prompts</dt>
      <dd>User Agents could ensure that users are fully informed and / or give explicit consent before identifiers are exposed in messages from Key Systems.</dd>

      <dt>User controls to disable Key Systems or Key System use of identifiers</dt>
      <dd>User Agents could provide users with a global control of whether a Key System is enabled / disabled and / or whether Key System use of user / device identifiers is enabled or disabled (if supported by the Key System).</dd>
    </dl>

    <p>While these suggestions prevent trivial use of this feature for user tracking, they do not block it altogether. Within a single domain, a site can continue to track the user during a session, and can then pass all this information to a third party along with any identifying information (names, credit card numbers, addresses) obtained by the site. If a third party cooperates with multiple sites to obtain such information, and if identifiers are not per-origin, then a profile can still be created.</p>
    <p>It is important to note that identifiers that are non-clearable, non-origin-specific or hardware-bound exceed the tracking impact of existing techniques such as Cookies or session identifiers embedded in URLs.</p>
    <p>Thus, in addition to the various mitigations described above, if a browser supports a mode of operation intended to preserve user anonymity, then User Agent implementers should carefully consider whether access to Key Systems should be disabled in this mode.</p>

    <h3 id="privacy-storedinfo">7.2. Information Stored on User Devices</h3>
    <p>Key Systems may store information on a user's device, or user agents may store information on behalf of Key Systems. Potentially, this could reveal information about a user to another user of the same device, including potentially the origins that have used a particular Key System (i.e. sites visited) or even the content that has been decrypted using a Key System.</p>
    <p>If information stored by one origin affects the operation of the Key System for another origin, then potentially the sites visited or content viewed by a user on one site may be revealed to another, potentially malicious, site.</p>
    <p>There are a number of techniques that can be used to mitigate these privacy risk to users:</p>

    <dl>
      <dt>Origin-specific Key System storage</dt>
      <dd>User agents may require that some or all of the Key System's persistently stored data is stored in an origin-specific way. Session data, licenses, and keys that are persistently stored should be stored per-origin.</dd>

      <dt>User deletion of Key System storage</dt>
      <dd>User agents may present the user with a way to delete Key System storage for a specific origin or all origins.</dd>

      <dt>Treating Key System stored data like cookies / Web Storage</dt>
      <dd>User agents should present the presence of persistent data stored by Key Systems to the user in a way that associates it strongly with HTTP session cookies and/or Web Storage. This might encourage users to view such data with healthy suspicion.</dd>

      <dt>Encryption or obfuscation of Key System stored data</dt>
      <dd>User agents should treat data stored by Key Systems as potentially sensitive; it is quite possible for user privacy to be compromised by the release of this information. To this end, user agents should ensure that such data is securely stored and when deleting data, it is promptly deleted from the underlying storage.</dd>
    </dl>

    </div>

    <h2 id="examples">8. Examples</h2>
    <non-normative-sections/>
    <p>This section contains example solutions for various use cases using the proposed extensions.
    These are not the only solutions to these use cases.
    Video elements are used in the examples, but the same would apply to all <a href="#media-element">media element</a>s.
    In some cases, such as using synchronous XHR, the examples are simplified to keep the focus on the extensions.
    </p>

    <h3 id="example-source-and-key-known" class="exampleheader">8.1. Source and Key Known at Page Load (Clear Key)</h3>
    <p class="exampledescription">In this simple example, the source file and <a href="#simple-decryption-clear-key">clear-text license</a> are hard-coded in the page.
    Only one session will ever be created.</p>

    <div class="example">
      <pre class="code">
&lt;script&gt;
  function load() {
    var video = document.getElementById("video");

    if (!video.<precoderef prefix="attr">mediaKeys</precoderef>) {
      var promise = <precoderef>MediaKeys</precoderef>.<premethodref>create</premethodref>("org.w3.clearkey");
      promise.catch(
        console.error.bind(console, "Unable to create MediaKeys")
      );
      promise.then(
        function(createdMediaKeys) {
          return video.<premethodref>setMediaKeys</premethodref>(createdMediaKeys);
        }
      ).catch(
        console.error.bind(console, "Unable to set MediaKeys")
      );
      promise.then(
        function(createdMediaKeys) {
          var initData = new Uint8Array([ ... ]);
          return createdMediaKeys.<premethodref>createSession</premethodref>("webm", initData);
        }
      ).then(
        function(keySession) {
          keySession.addEventListener("<precoderef prefix="event">message</precoderef>", handleMessage, false);
        }
      ).catch(
        console.error.bind(console, "Unable to create key session")
      );
    }
  }

  function handleMessage(event) {
    var keySession = event.target;

    var license = new Uint8Array([ ... ]);
    keySession.<premethodref>update</premethodref>(license).catch(
      console.error.bind(console, "update() failed")
    );
  }
&lt;/script&gt;

&lt;body onload="load()"&gt;
  &lt;video src="foo.webm" autoplay id="video"&gt;&lt;/video&gt;
&lt;/body&gt;</pre>
    </div>

    <h3 id="example-selecting-key-system" class="exampleheader">8.2. Selecting a Supported Key System and Using Initialization Data from the "needkey" Event</h3>
    <p class="exampledescription">This example selects a supported <a href="#key-system">Key System</a> using the <methodref>isTypeSupported</methodref> method then uses
    the <a href="#initialization-data">Initialization Data</a> from the <videoanchor name="media-data">media data</videoanchor> to generate the license request and send it to the appropriate license server.
    One of the supported key systems uses a serverCertificate, which is provided proactively.
    </p>

    <div class="example">
      <pre class="code">
&lt;script&gt;
  var keySystem;
  var licenseUrl;
  var serverCertificate;

  function selectKeySystem() {
    if (<precoderef>MediaKeys</precoderef>.<premethodref>isTypeSupported</premethodref>("com.example.somesystem", "webm", "video/webm; codecs='vp8, vorbis'")) {
      licenseUrl = "https://license.example.com/getkey"; // OR "https://example.&lt;My Video Site domain&gt;"
      keySystem = "com.example.somesystem";
      serverCertificate = new Uint8Array([ ... ]);
    } else if (<precoderef>MediaKeys</precoderef>.<premethodref>isTypeSupported</premethodref>("com.foobar", "webm", "video/webm; codecs='vp8, vorbis'")) {
      licenseUrl = "https://license.foobar.com/request";
      keySystem = "com.foobar";
    } else {
      throw "Key System not supported";
    }
  }

  function handleKeyNeeded(event) {
    var video = event.target;
    if (video.mediaKeysObject === undefined) {
      selectKeySystem();
      video.mediaKeysObject = null; // Prevent entering this path again.
      video.pendingSessionData = []; // Will store all initData until the MediaKeys is ready.
      <precoderef>MediaKeys</precoderef>.<premethodref>create</premethodref>(keySystem).then(
        function(createdMediaKeys) {
          video.mediaKeysObject = createdMediaKeys;

          if (serverCertificate)
            createdMediaKeys.<premethodref>setServerCertificate</premethodref>(serverCertificate);

          for (var i = 0; i &lt; video.pendingSessionData.length; i++) {
            var data = video.pendingSessionData[i];
            createSession(video.mediaKeysObject, data.initDataType, data.initData);
          }
          video.pendingSessionData = [];

          return video.<premethodref>setMediaKeys</premethodref>(createdMediaKeys);
        }
      ).catch(
        console.error.bind(console, "Unable to create or use new MediaKeys")
      );
    }
    addSession(video, event.<precoderef>initDataType</precoderef>, event.<precoderef>initData</precoderef>);
  }

  function addSession(video, initDataType, initData) {
    if (video.mediaKeysObject) {
      createSession(video.mediaKeysObject, initDataType, initData);
    } else {
      video.pendingSessionData.push({initDataType: initDataType, initData: initData});
    }
  }

  function createSession(mediaKeys, initDataType, initData) {
    mediaKeys.<premethodref>createSession</premethodref>(initDataType, initData).then(
      function(keySession) {
        if (keySession) {
          keySession.addEventListener("<precoderef prefix="event">message</precoderef>", licenseRequestReady, false);
        } else {
          console.log("A session already exists for the initData");
        }
      }
    ).catch(
      console.error.bind(console, "Unable to create or initialize key session")
    );
  }

  function licenseRequestReady(event) {
    var request = event.<precoderef>message</precoderef>;

    var xmlhttp = new XMLHttpRequest();
    xmlhttp.keySession = event.target;
    xmlhttp.open("POST", licenseUrl);
    xmlhttp.onreadystatechange = function() {
      if (xmlhttp.readyState == 4) {
        var license = new Uint8Array(xmlhttp.response);
        xmlhttp.keySession.<premethodref>update</premethodref>(license).catch(
          console.error.bind(console, "update() failed")
        );
      }
    }
    xmlhttp.send(request);
  }
&lt;/script&gt;

&lt;video src="foo.webm" autoplay on<precoderef>needkey</precoderef>="handleKeyNeeded(event)"&gt;&lt;/video&gt;</pre>
    </div>

    <h3 id="example-mediakeys-before-source" class="exampleheader">8.3. Create MediaKeys Before Loading Media</h3>
    <p class="exampledescription">Initialization is much simpler if needkey events do not need to be handled during MediaKeys initialization.
    This can be accomplished either by providing the <a href="#initialization-data">Initialization Data</a> in other ways or setting the source after the MediaKeys object has been created.
    This example does the latter.
    </p>

    <div class="example">
      <pre class="code">
&lt;script&gt;
  var keySystem;
  var licenseUrl;
  var serverCertificate;
  var mediaKeys;

  // See the previous example for implementations of these functions.
  function selectKeySystem() { ... }
  function createSession(mediaKeys, initDataType, initData) { ... }
  function licenseRequestReady(event) { ... }

  function handleKeyNeeded(event) {
    createSession(mediaKeys, event.<precoderef>initDataType</precoderef>, event.<precoderef>initData</precoderef>);
  }

  selectKeySystem();
  <precoderef>MediaKeys</precoderef>.<premethodref>create</premethodref>(keySystem).then(
    function(createdMediaKeys) {
      mediaKeys = createdMediaKeys;
      var video = document.getElementById("v");
      video.src = "foo.webm";
      if (serverCertificate)
        mediaKeys.setServerCertificate(serverCertificate);
      return video.<premethodref>setMediaKeys</premethodref>(mediaKeys);
    }
  ).catch(
    console.error.bind(console, "Unable to create or initialize key session")
  );
&lt;/script&gt;

&lt;video id="v" autoplay on<precoderef>needkey</precoderef>="handleKeyNeeded(event)"&gt;&lt;/video&gt;</pre>
    </div>

    <h3 id="example-using-all-events" class="exampleheader">8.4. Using All Events</h3>
    <p class="exampledescription">This is a more complete example showing all events being used.</p>
    <p class="exampledescription">Note that <code>handleMessage()</code> could be called multiple times, including in response to the <methodref>update</methodref> call if multiple round trips are required and for any other reason the Key System might need to send a message.</p>

    <div class="example">
      <pre class="code">
&lt;script&gt;
  var keySystem;
  var licenseUrl;
  var serverCertificate;
  var mediaKeys;

  // See previous examples for implementations of these functions.
  function selectKeySystem() { ... }
  function handleKeyNeeded(event) { ... }

  // This replaces the implementation in the previous example.
  function createSession(mediaKeys, initDataType, initData) {
    mediaKeys.<premethodref>createSession</premethodref>(initDataType, initData).then(
      function(keySession) {
        if (!keySession)
          return; // A session already exists for the initData.
        keySession.addEventListener("<precoderef prefix="event">message</precoderef>", handleMessage, false);
        keySession.addEventListener("<precoderef prefix="event">keyschange</precoderef>", handleKeysChange, false);
        keySession.addEventListener("<precoderef prefix="event">error</precoderef>", handleError, false);
        keySession.<precoderef>closed</precoderef>.then(
          console.log.bind(console, "Session closed")
        );
      }
    ).catch(
      console.error.bind(console, "Unable to create or initialize key session")
    );
  }

  function handleMessageResponse(keySession, response) {
    var license = new Uint8Array(response);
    keySession.<premethodref>update</premethodref>(license).catch(
      function(err) {
        console.error("update() failed: " + err);
      }
    );
  }

  function sendMessage(message, keySession) {
    xmlhttp = new XMLHttpRequest();
    xmlhttp.keySession = keySession;
    xmlhttp.open("POST", licenseUrl);
    xmlhttp.onreadystatechange = function() {
      if (xmlhttp.readyState == 4)
        handleMessageResponse(xmlhttp.keySession, xmlhttp.response);
    }
    xmlhttp.send(message);
  }

  function handleMessage(event) {
    sendMessage(event.<precoderef>message</precoderef>, event.target);
  }

  function handleKeysChange(event) {
    // Check event.target.<precoderef>usableKeyIds</precoderef> and respond appropriately.
  }

  function handleError(event) {
    // Report event.target.error.name and event.target.error.<precoderef>systemCode</precoderef>,
    // and do some bookkeeping with event.target.<precoderef>sessionId</precoderef> if necessary.
  }

  selectKeySystem();
  <precoderef>MediaKeys</precoderef>.<premethodref>create</premethodref>(keySystem).then(
    function(createdMediaKeys) {
      mediaKeys = createdMediaKeys;
      var video = document.getElementById("v");
      video.src = "foo.webm";
      if (serverCertificate)
        mediaKeys.setServerCertificate(serverCertificate);
      return video.<premethodref>setMediaKeys</premethodref>(mediaKeys);
    }
  ).catch(
    console.error.bind(console, "Unable to create or use new MediaKeys")
  );
&lt;/script&gt;

&lt;video id="v" autoplay on<precoderef>needkey</precoderef>="handleKeyNeeded(event)"&gt;&lt;/video&gt;</pre>
    </div>

    <h3 id="example-stored-license" class="exampleheader">8.5. Stored License</h3>
    <p class="exampledescription">This example requests a persistent license for future use and stores it. It also provides functions for later retrieving the license and for destroying it.</p>

    <div class="example">
      <pre class="code">
&lt;script&gt;
  var keySystem;
  var licenseUrl;
  var serverCertificate;
  var mediaKeys;

  // See the previous examples for implementations of these functions.
  function selectKeySystem() { ... }
  function sendMessage(message, keySession) { ... }
  function handleMessage(event) { ... }
  function handleError(event) { ... }

  // Called if the application does not have a stored sessionId for the media resource.
  function createSession(mediaKeys, initDataType, initData) {
    mediaKeys.<premethodref>createSession</premethodref>(initDataType, initData, "persistent").then(
      function(keySession) {
        if (!keySession)
          return; // A session already exists for the initData.
        keySession.addEventListener("<precoderef prefix="event">message</precoderef>", handleMessage, false);
        keySession.addEventListener("<precoderef prefix="event">error</precoderef>", handleError, false);
        keySession.<precoderef>closed</precoderef>.then(
          function() {
            console.log("Session " + this.sessionId + " closed");
          }.bind(keySession)        
        );
        // Store keySession.<precoderef>sessionId</precoderef> in the application.
      }
    ).catch(
      console.error.bind(console, "Unable to create or initialize a persistable key session")
    );
  }

  // Called if the application has a stored sessionId for the media resource.
  function loadStoredSession(mediaKeys, sessionId) {
    mediaKeys.<premethodref>loadSession</premethodref>(sessionId).then(
      function(keySession) {
        if (!keySession) {
          console.error("No stored session with the ID " + sessionId + " was found.");
          // The application should remove its record of |sessionId|.
          return;
        }
        keySession.addEventListener("<precoderef prefix="event">message</precoderef>", handleMessage, false);
        keySession.addEventListener("<precoderef prefix="event">error</precoderef>", handleError, false);
        keySession.<precoderef>closed</precoderef>.then(
          console.log.bind(console, "Session closed")
        );
      }
    ).catch(
      console.error.bind(console, "Unable to load or initialize the stored session with the ID " + sessionId)
    );
  }

  // Called when the application wants to stop using the session without removing the stored license.
  closeSession(keySession) {
    keySession.<premethodref>close</premethodref>();
  }

  // Called when the application wants to remove the stored license.
  // Calling remove() may initiate a series of messages to/from the server.
  // The stored session data has not been completely removed until the returned promise is fulfilled.
  removeStoredSession(keySession) {
    keySession.<premethodref>remove</premethodref>().then(
      function() {
        console.log("Session " + this.sessionId + " removed");
        // The application should remove its record of this.sessionId.
      }.bind(keySession)
    ).catch(
      console.error.bind(console, "Failed to remove the session")
    );
  }

  // This replaces the implementation in the previous example.
  function handleMessageResponse(keySession, response) {
    var license = new Uint8Array(response);
    keySession.<premethodref>update</premethodref>(license).then(
      function() {
        // If this was the last required message from the server, the license is
        // now stored. Update the application state as appropriate.
      }
    ).catch(
      console.error.bind(console, "update() failed")
    );
  }

  selectKeySystem();
  <precoderef>MediaKeys</precoderef>.<premethodref>create</premethodref>(keySystem).then(
    function(createdMediaKeys) {
      mediaKeys = createdMediaKeys;
      var video = document.getElementById("v");
      if (serverCertificate)
        mediaKeys.setServerCertificate(serverCertificate);
      return video.<premethodref>setMediaKeys</premethodref>(mediaKeys);
    }
  ).catch(
    console.error.bind(console, "Unable to create or use new MediaKeys")
  );
&lt;/script&gt;

&lt;video id="v" src="foo.webm" autoplay&gt;&lt;/video&gt;</pre>
    </div>


    <h2 id="revision-history">9. Revision History</h2>
    <table>
      <thead>
        <tr>
          <th>Version</th>
          <th>Comment</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td><a href="https://dvcs.w3.org/hg/html-media/raw-file/9842af174b80/encrypted-media/encrypted-media.html">14 April 2014</a></td>
          <td>Use promises.</td>
        </tr>
        <tr>
          <td><a href="http://dvcs.w3.org/hg/html-media/raw-file/ef65c237d053/encrypted-media/encrypted-media.html">1 April 2014</a></td>
          <td>Moved Container Guidelines to the <a href="initdata-format-registry.html">Encrypted Media Extensions Stream Format and Initialization Data Format Registry</a>.</td>
        </tr>
        <tr>
          <td><a href="http://dvcs.w3.org/hg/html-media/raw-file/11245f9516cf/encrypted-media/encrypted-media.html">3 February 2014</a></td>
          <td>Produced candidate WD.</td>
        </tr>
        <tr>
          <td>17 September 2013</td>
          <td>Produced candidate WD.</td>
        </tr>
        <tr>
          <td>6 May 2013</td>
          <td>Produced updated candidate FPWD.</td>
        </tr>
        <tr>
          <td>14 January 2013</td>
          <td>Produced candidate FPWD.</td>
        </tr>
        <tr>
          <td>16 August 2012</td>
          <td>Converted to the object-oriented API.</td>
        </tr>
        <tr>
          <td><a href="http://dvcs.w3.org/hg/html-media/raw-file/eme-v0.1b/encrypted-media/encrypted-media.html">0.1b</a></td>
          <td>Last non-object-oriented revision.</td>
        </tr>
        <tr>
          <td><a href="http://dvcs.w3.org/hg/html-media/raw-file/eme-v0.1a/encrypted-media/encrypted-media.html">0.1a</a></td>
          <td>Corrects minor mistakes in 0.1.</td>
        </tr>
        <tr>
          <td><a href="http://dvcs.w3.org/hg/html-media/raw-file/eme-v0.1/encrypted-media/encrypted-media.html">0.1</a></td>
          <td>Initial Proposal</td>
        </tr>
      </tbody>
    </table>
  </body>
</html>
